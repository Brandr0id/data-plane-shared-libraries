# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
    AWS Proxy for the Nitro Enclave

    Note: this package uses an older version of absl. This is to work around
    the incompatibility between the clang-11 compiler used on amazonlinux2
    and the versions of absl since 2023-11-17 (commit 00e087f). clang-11
    doesn't have std::filesystem, instead it's in std::experimental
"""

load("@com_github_grpc_grpc//bazel:grpc_build_system.bzl", "grpc_proto_library")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_layer")
load("@rules_buf//buf:defs.bzl", "buf_lint_test")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:pkg.bzl", "pkg_tar")
load("@rules_proto//proto:defs.bzl", "proto_library")

package(default_visibility = ["//scp/cc/aws/proxy/test:__subpackages__"])

cc_binary(
    name = "resolv_conf_getter_client",
    srcs = ["resolv_conf_getter_client.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":resolv_conf_getter_grpc",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "resolv_conf_getter_server",
    srcs = ["resolv_conf_getter_server.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":resolv_conf_getter_grpc",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
    ],
)

proto_library(
    name = "resolv_conf_getter_proto",
    srcs = ["resolv_conf_getter.proto"],
)

grpc_proto_library(
    name = "resolv_conf_getter_grpc",
    srcs = ["resolv_conf_getter.proto"],
)

buf_lint_test(
    name = "resolv_conf_getter_proto_lint",
    size = "small",
    config = "//scp:buf.yaml",
    targets = [":resolv_conf_getter_proto"],
)

pkg_files(
    name = "resolv_conf_getter_server_bin",
    srcs = [
        ":resolv_conf_getter_server",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/opt/google/",
)

pkg_tar(
    name = "resolv_conf_getter_server_tar",
    srcs = [
        ":resolv_conf_getter_server_bin",
    ],
)

container_layer(
    name = "resolv_conf_getter_server_layer",
    directory = "/",
    tars = [
        ":resolv_conf_getter_server_tar",
    ],
)

container_image(
    name = "resolv_conf_getter_server_debian_image",
    architecture = select({
        "@platforms//cpu:aarch64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = select({
        "@platforms//cpu:aarch64": "@runtime-debian-debug-nonroot-arm64//image",
        "@platforms//cpu:x86_64": "@runtime-debian-debug-nonroot-amd64//image",
    }),
    entrypoint = ["/opt/google/resolv_conf_getter_server"],
    layers = [
        ":resolv_conf_getter_server_layer",
    ],
    ports = ["1600"],
    visibility = [
        "//production/packaging/aws:__subpackages__",
    ],
)

genrule(
    name = "copy_to_dist",
    srcs = [
        ":resolv_conf_getter_server_debian_image.tar",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat << EOF > '$@'
readonly target_dir=dist/aws
mkdir -p \\$${target_dir}
cp $(execpath :resolv_conf_getter_server_debian_image.tar) "\\$${target_dir}"
EOF""",
    executable = True,
    local = True,
    message = "copying resolv_conf_getter_server to dist/aws/ directory",
)

cc_library(
    name = "acceptor_pool",
    hdrs = ["acceptor_pool.h"],
    deps = [
        ":socket_types",
        "//scp/cc/aws:include_dir",
        "@com_google_absl_for_proxy//absl/container:flat_hash_map",
        "@com_google_absl_for_proxy//absl/log",
    ],
)

cc_library(
    name = "buffer",
    hdrs = ["buffer.h"],
    deps = [
        ":freelist",
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "client_session_pool",
    srcs = ["client_session_pool.cc"],
    hdrs = ["client_session_pool.h"],
    deps = [
        ":socket_types",
        ":socket_vendor_protocol",
        "//scp/cc/aws:include_dir",
        "@boost//:asio",
        "@com_google_absl_for_proxy//absl/log",
    ],
)

cc_library(
    name = "config",
    hdrs = ["config.h"],
    deps = [
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "freelist",
    hdrs = ["freelist.h"],
    deps = [
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "preload",
    srcs = [
        "preload.cc",
    ],
    hdrs = ["preload.h"],
    deps = [
        ":protocol",
        ":socket_vendor_protocol",
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "protocol",
    srcs = ["protocol.cc"],
    hdrs = ["protocol.h"],
    deps = [
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "proxy_bridge",
    srcs = ["proxy_bridge.cc"],
    hdrs = ["proxy_bridge.h"],
    deps = [
        ":acceptor_pool",
        ":buffer",
        ":socket_types",
        ":socks5_state",
        "//scp/cc/aws:include_dir",
        "@boost//:asio",
        "@com_google_absl_for_proxy//absl/log",
    ],
)

cc_library(
    name = "proxy_server",
    srcs = ["proxy_server.cc"],
    hdrs = ["proxy_server.h"],
    deps = [
        ":acceptor_pool",
        ":config",
        ":proxy_bridge",
        ":socket_types",
        "//scp/cc/aws:include_dir",
        "@boost//:asio",
    ],
)

cc_library(
    name = "socket_types",
    hdrs = ["socket_types.h"],
    deps = [
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "socket_vendor_protocol",
    hdrs = ["socket_vendor_protocol.h"],
    deps = [
        "//scp/cc/aws:include_dir",
    ],
)

cc_library(
    name = "socket_vendor_server",
    srcs = ["socket_vendor_server.cc"],
    hdrs = ["socket_vendor_server.h"],
    deps = [
        ":client_session_pool",
        ":socket_types",
        "//scp/cc/aws:include_dir",
        "@boost//:asio",
        "@com_google_absl_for_proxy//absl/log",
    ],
)

cc_library(
    name = "socks5_state",
    srcs = ["socks5_state.cc"],
    hdrs = ["socks5_state.h"],
    deps = [
        ":buffer",
        ":protocol",
        "//scp/cc/aws:include_dir",
        "@com_google_absl_for_proxy//absl/log",
    ],
)

cc_binary(
    name = "proxy",
    srcs = [":proxy.cc"],
    linkopts = ["-pthread"],
    visibility = ["//visibility:public"],
    deps = [
        ":config",
        ":proxy_server",
        "@com_google_absl_for_proxy//absl/base:log_severity",
        "@com_google_absl_for_proxy//absl/debugging:failure_signal_handler",
        "@com_google_absl_for_proxy//absl/debugging:symbolize",
        "@com_google_absl_for_proxy//absl/flags:flag",
        "@com_google_absl_for_proxy//absl/flags:parse",
        "@com_google_absl_for_proxy//absl/log",
        "@com_google_absl_for_proxy//absl/log:check",
        "@com_google_absl_for_proxy//absl/log:flags",
        "@com_google_absl_for_proxy//absl/log:globals",
        "@com_google_absl_for_proxy//absl/log:initialize",
    ],
)

cc_binary(
    name = "proxy_preload",
    srcs = [
        ":preload.cc",
        ":protocol.cc",
        ":protocol.h",
    ],
    copts = [
        "-fvisibility=hidden",
    ],
    linkopts = ["-ldl"],
    linkshared = True,
    visibility = [
        "//production/packaging/aws:__subpackages__",
        "//scp/cc/aws/proxy/test:__subpackages__",
    ],
    deps = [
        ":preload",
        ":protocol",
        ":socket_vendor_protocol",
        "//scp/cc/aws:include_dir",
    ],
)

cc_binary(
    name = "proxify",
    srcs = [":proxify.cc"],
    visibility = [
        "//production/packaging/aws:__subpackages__",
        "//scp/cc/aws/proxy/test:__subpackages__",
    ],
    deps = [
        "//scp/cc/aws:include_dir",
        "@com_google_absl_for_proxy//absl/flags:parse",
        "@com_google_absl_for_proxy//absl/strings",
    ],
)

cc_binary(
    name = "socket_vendor",
    srcs = [":socket_vendor.cc"],
    copts = [
        "-Wno-c99-designator",
    ],
    visibility = [
        "//production/packaging/aws:__subpackages__",
        "//scp/cc/aws/proxy/test:__subpackages__",
    ],
    deps = [
        ":protocol",
        ":socket_vendor_server",
        "@com_google_absl_for_proxy//absl/flags:parse",
        "@com_google_absl_for_proxy//absl/log",
        "@com_google_absl_for_proxy//absl/log:flags",
        "@com_google_absl_for_proxy//absl/log:initialize",
        "@com_google_absl_for_proxy//absl/strings",
    ],
)

pkg_files(
    name = "proxy_bin",
    srcs = [
        ":proxy",
    ],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/opt/google/proxy",
)

pkg_tar(
    name = "proxy_tar",
    srcs = [
        ":proxy_bin",
    ],
)

container_layer(
    name = "proxy_layer",
    directory = "/",
    tars = [
        ":proxy_tar",
    ],
    visibility = [
        "//scp/cc/aws:__subpackages__",
    ],
)

container_image(
    name = "proxy_debian_image",
    architecture = select({
        "@platforms//cpu:aarch64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = select({
        "@platforms//cpu:aarch64": "@runtime-debian-debug-root-arm64//image",
        "@platforms//cpu:x86_64": "@runtime-debian-debug-root-amd64//image",
    }),
    entrypoint = ["/bin/bash"],
    layers = [
        ":proxy_layer",
    ],
    visibility = [
        "//production/packaging/aws:__subpackages__",
    ],
)

pkg_files(
    name = "proxify_executables",
    srcs = [
        "//scp/cc/aws/proxy/src:proxify",
        "//scp/cc/aws/proxy/src:resolv_conf_getter_client",
        "//scp/cc/aws/proxy/src:socket_vendor",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/",
)

pkg_files(
    name = "proxify_libs",
    srcs = [
        "//scp/cc/aws/proxy/src:proxy_preload",
    ],
    attributes = pkg_attributes(mode = "0444"),
    prefix = "/",
)

pkg_tar(
    name = "proxify_tar",
    srcs = [
        ":proxify_executables",
        ":proxify_libs",
    ],
)

pkg_files(
    name = "libnsm_libs",
    srcs = [
        "//scp/cc/cpio/client_providers/kms_client_provider/src/aws:libnsm_so",
    ],
    attributes = pkg_attributes(mode = "0444"),
    prefix = "/usr/lib/x86_64-linux-gnu/",
)

pkg_tar(
    name = "libnsm_tar",
    srcs = [
        ":libnsm_libs",
    ],
    package_dir = "/",
)

container_layer(
    name = "proxify_layer",
    directory = "/",
    tars = [
        ":libnsm_tar",
        ":proxify_tar",
    ],
    visibility = [
        "//visibility:public",  # Leave as public for KV server.
    ],
)
