# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_layer")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_commit_layer")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

package(default_visibility = ["//scp/cc:scp_internal_pkg"])

LINK_OPTS = [
    # Tell LD to look in the working directory of the executable for SO
    # files to link
    "-Wl,-rpath,'$$ORIGIN'",
]

pkg_files(
    name = "validator_config_files",
    srcs = [
        ":validator_config.txtpb",
    ],
    attributes = pkg_attributes(mode = "0444"),
    prefix = "/etc",
)

pkg_tar(
    name = "validator_config_tar",
    srcs = [
        ":validator_config_files",
    ],
)

container_layer(
    name = "validator_config_layer",
    directory = "/",
    tars = [
        ":validator_config_tar",
    ],
)

cc_library(
    name = "blob_storage_client_validator",
    srcs = ["blob_storage_client_validator.cc"],
    hdrs = ["blob_storage_client_validator.h"],
    deps = [
        "//scp/cc/core/interface:async_context_lib",
        "//scp/cc/public/core/interface:errors",
        "//scp/cc/public/core/interface:execution_result",
        "//scp/cc/public/cpio/interface/blob_storage_client",
        "//scp/cc/public/cpio/proto/blob_storage_service/v1:blob_storage_service_cc_proto",
        "//scp/cc/public/cpio/validator/proto:validator_config_proto_lib",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "instance_client_validator",
    srcs = ["instance_client_validator.cc"],
    hdrs = ["instance_client_validator.h"],
    deps = [
        "//scp/cc/public/core/interface:errors",
        "//scp/cc/public/core/interface:execution_result",
        "//scp/cc/public/cpio/interface/instance_client",
        "//scp/cc/public/cpio/interface/instance_client:type_def",
        "//scp/cc/public/cpio/proto/instance_service/v1:instance_service_cc_proto",
        "//scp/cc/public/cpio/validator/proto:validator_config_proto_lib",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "parameter_client_validator",
    srcs = ["parameter_client_validator.cc"],
    hdrs = ["parameter_client_validator.h"],
    deps = [
        "//scp/cc/public/core/interface:errors",
        "//scp/cc/public/core/interface:execution_result",
        "//scp/cc/public/cpio/interface/parameter_client",
        "//scp/cc/public/cpio/interface/parameter_client:type_def",
        "//scp/cc/public/cpio/proto/parameter_service/v1:parameter_service_cc_proto",
        "//scp/cc/public/cpio/validator/proto:validator_config_proto_lib",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_binary(
    name = "validation",
    srcs = ["validation.cc"],
    linkopts = LINK_OPTS,
    deps = [
        ":blob_storage_client_validator",
        ":instance_client_validator",
        ":parameter_client_validator",
        "//scp/cc:cc_base_include_dir",
        "//scp/cc/cpio/client_providers/global_cpio/src:global_cpio_lib",
        "//scp/cc/public/core/interface:errors",
        "//scp/cc/public/cpio/interface:cpio",
        "//scp/cc/public/cpio/validator/proto:validator_config_proto_lib",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:globals",
        "@com_google_absl//absl/log:initialize",
        "@com_google_protobuf//:protobuf",
    ],
)

pkg_files(
    name = "enclaves_validator_execs",
    srcs = [
        ":validation",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/server/bin",
)

pkg_tar(
    name = "enclaves_validator_tar",
    srcs = [
        ":enclaves_validator_execs",
    ],
)

container_layer(
    name = "enclaves_validator_layer",
    directory = "/",
    tars = [
        ":enclaves_validator_tar",
    ],
)

write_file(
    name = "resolv_conf",
    out = "resolv_override.conf",
    content = ["""
; use-vc forces use of TCP for DNS resolutions.
; See https://man7.org/linux/man-pages/man5/resolv.conf.5.html
options use-vc timeout:2 attempts:5
search ec2.internal
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
"""],
)

pkg_files(
    name = "resolv_conf_files",
    srcs = [
        ":resolv_conf",
    ],
    attributes = pkg_attributes(mode = "0444"),
    prefix = "/etc",
)

pkg_tar(
    name = "resolv_conf_tar",
    srcs = [
        ":resolv_conf_files",
    ],
)

container_layer(
    name = "resolv_conf_layer",
    directory = "/",
    tars = [
        ":resolv_conf_tar",
    ],
)

pkg_files(
    name = "kmstool_enclave_execs",
    srcs = [
        "//scp/cc/cpio/client_providers/kms_client_provider/src/aws:kms_cli",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/server/bin",
)

pkg_tar(
    name = "kmstool_enclave_tar",
    srcs = [
        ":kmstool_enclave_execs",
    ],
)

container_layer(
    name = "kmstool_enclave_layer",
    directory = "/",
    tars = [
        ":kmstool_enclave_tar",
    ],
)

container_run_and_commit_layer(
    name = "curl_layer",
    commands = [
        # Install CA certificates.
        """
apt-get update
apt-get install -y ca-certificates
""",
    ],
    image = select({
        "@platforms//cpu:aarch64": "@runtime-ubuntu-fulldist-debug-root-arm64//image",
        "@platforms//cpu:x86_64": "@runtime-ubuntu-fulldist-debug-root-amd64//image",
    }),
    tags = ["no-remote"],
)

container_image(
    name = "aws_nitro_enclaves_validator_image",
    architecture = select({
        "@platforms//cpu:aarch64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = select({
        "@platforms//cpu:aarch64": "@runtime-ubuntu-fulldist-debug-root-arm64//image",
        "@platforms//cpu:x86_64": "@runtime-ubuntu-fulldist-debug-root-amd64//image",
    }),
    cmd = [
        "/proxify",
        "--",
        "/server/bin/validation",
    ],
    entrypoint = ["/bin/bash"],
    layers = [
        "//scp/cc/aws/proxy/src:proxify_layer",
        ":curl_layer",
        ":kmstool_enclave_layer",
        ":resolv_conf_layer",
        ":validator_config_layer",
        ":enclaves_validator_layer",
    ],
)
