diff --git a/build_defs/cc/aws/aws_sdk_cpp_source_code.BUILD b/build_defs/cc/aws/aws_sdk_cpp_source_code.BUILD
index 9a257ad86..d576bcd9d 100644
--- a/build_defs/cc/aws/aws_sdk_cpp_source_code.BUILD
+++ b/build_defs/cc/aws/aws_sdk_cpp_source_code.BUILD
@@ -288,3 +288,57 @@ genrule(
     ],
     cmd_bash = "touch '$@'",
 )
+
+cc_library(
+    name = "transfer",
+    srcs = glob([
+        "aws-cpp-sdk-transfer/source/transfer/*.cpp",  # TRANSFER_SOURCE
+    ]),
+    hdrs = glob([
+        "aws-cpp-sdk-transfer/include/aws/transfer/*.h",  # TRANSFER_HEADERS
+    ]),
+    includes = [
+        "aws-cpp-sdk-transfer/include",
+    ],
+    deps = [
+        ":core",
+        ":s3",
+    ],
+)
+
+cc_library(
+    name = "kinesis",
+    srcs = glob([
+        "aws-cpp-sdk-kinesis/source/*.cpp",  # AWS_KINESIS_SOURCE
+        "aws-cpp-sdk-kinesis/source/model/*.cpp",  # AWS_KINESIS_MODEL_SOURCE
+    ]),
+    hdrs = glob([
+        "aws-cpp-sdk-kinesis/include/aws/kinesis/*.h",  # AWS_KINESIS_HEADERS
+        "aws-cpp-sdk-kinesis/include/aws/kinesis/model/*.h",  # AWS_KINESIS_MODEL_HEADERS
+    ]),
+    includes = [
+        "aws-cpp-sdk-kinesis/include",
+    ],
+    deps = [
+        ":core",
+    ],
+)
+
+cc_library(
+    name = "sns",
+    srcs = glob([
+        "aws-cpp-sdk-sns/source/*.cpp",  # AWS_SNS_SOURCE
+        "aws-cpp-sdk-sns/source/model/*.cpp",  # AWS_SNS_MODEL_SOURCE
+    ]),
+    hdrs = glob([
+        "aws-cpp-sdk-sns/include/aws/sns/*.h",  # AWS_SNS_HEADERS
+        "aws-cpp-sdk-sns/include/aws/sns/model/*.h",  # AWS_SNS_MODEL_HEADERS
+    ]),
+    includes = [
+        "aws-cpp-sdk-sns/include",
+    ],
+    deps = [
+        ":core",
+    ],
+)
+
diff --git a/build_defs/cc/aws/aws_sdk_cpp_source_code_deps.bzl b/build_defs/cc/aws/aws_sdk_cpp_source_code_deps.bzl
index 1bdbf8172..9b1644eab 100644
--- a/build_defs/cc/aws/aws_sdk_cpp_source_code_deps.bzl
+++ b/build_defs/cc/aws/aws_sdk_cpp_source_code_deps.bzl
@@ -15,14 +15,14 @@
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
 
-def import_aws_sdk_cpp():
+def import_aws_sdk_cpp(scp_repo_name = ""):
     """
     Import AWS SDK CPP source code
     """
     maybe(
         http_archive,
         name = "aws_checksums",
-        build_file = Label("//build_defs/cc/aws:aws_checksums.BUILD"),
+        build_file = Label(scp_repo_name + "//build_defs/cc/aws:aws_checksums.BUILD"),
         sha256 = "6e6bed6f75cf54006b6bafb01b3b96df19605572131a2260fddaf0e87949ced0",
         strip_prefix = "aws-checksums-0.1.5",
         urls = [
@@ -44,7 +44,7 @@ def import_aws_sdk_cpp():
     maybe(
         http_archive,
         name = "aws_sdk_cpp",
-        build_file = Label("//build_defs/cc/aws:aws_sdk_cpp_source_code.BUILD"),
+        build_file = Label(scp_repo_name + "//build_defs/cc/aws:aws_sdk_cpp_source_code.BUILD"),
         patch_cmds = [
             """sed -i.bak 's/UUID::RandomUUID/Aws::Utils::UUID::RandomUUID/g' aws-cpp-sdk-core/source/client/AWSClient.cpp""",
             # Apply fix in https://github.com/aws/aws-sdk-cpp/commit/9669a1c1d9a96621cd0846679cbe973c648a64b3
diff --git a/build_defs/cc/sdk_common.bzl b/build_defs/cc/sdk_common.bzl
index 4abcb8c05..b7445f00f 100644
--- a/build_defs/cc/sdk_common.bzl
+++ b/build_defs/cc/sdk_common.bzl
@@ -12,7 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-load("//build_defs/shared:protobuf.bzl", "protobuf")
 load("//build_defs/shared:absl.bzl", "absl")
 load("//build_defs/shared:bazel_rules_pkg.bzl", "bazel_rules_pkg")
 load("//build_defs/shared:bazel_rules_java.bzl", "bazel_rules_java")
@@ -27,10 +26,11 @@ load("//build_defs/cc/shared:cc_utils.bzl", "cc_utils")
 load("//build_defs/cc/shared:gtest.bzl", "google_test")
 load("//build_defs/cc/shared:nghttp2.bzl", "nghttp2")
 load("//build_defs/cc/shared:google_cloud_cpp.bzl", "import_google_cloud_cpp")
+load("//build_defs/shared:rpm.bzl", "rpm")
 load("//build_defs/tink:tink_defs.bzl", "import_tink_git")
 load("//build_defs/shared:java_grpc.bzl", "java_grpc")
 
-def sdk_common(protobuf_version, protobuf_repo_hash):
+def sdk_common():
     absl()
     bazel_docker_rules()
     bazel_rules_cpp()
@@ -45,6 +45,6 @@ def sdk_common(protobuf_version, protobuf_repo_hash):
     grpc()
     java_grpc()
     nghttp2()
-    protobuf(protobuf_version, protobuf_repo_hash)
     import_google_cloud_cpp()
     import_tink_git()
+    rpm()
diff --git a/build_defs/cc/sdk_source_code.bzl b/build_defs/cc/sdk_source_code.bzl
index 7065a52fb..baa2cd2cc 100644
--- a/build_defs/cc/sdk_source_code.bzl
+++ b/build_defs/cc/sdk_source_code.bzl
@@ -17,8 +17,10 @@ load("//build_defs/cc/aws:aws_sdk_cpp_source_code_deps.bzl", "import_aws_sdk_cpp
 load("//build_defs/cc/aws:aws_nitro_enclaves_sdk_source_code_deps.bzl", "import_aws_nitro_enclaves_sdk")
 load("//build_defs/cc:sdk_common.bzl", "sdk_common")
 
-def sdk_dependencies(protobuf_version, protobuf_repo_hash):
-    sdk_common(protobuf_version, protobuf_repo_hash)
+def sdk_dependencies():
+    sdk_common()
     aws_c_common()
+
+def sdk_dependencies2():
     import_aws_sdk_cpp()
-    import_aws_nitro_enclaves_sdk()
+    import_aws_nitro_enclaves_sdk()
\ No newline at end of file
diff --git a/build_defs/cc/sdk_static_lib.bzl b/build_defs/cc/sdk_static_lib.bzl
index eec3909eb..aeef1866a 100644
--- a/build_defs/cc/sdk_static_lib.bzl
+++ b/build_defs/cc/sdk_static_lib.bzl
@@ -18,7 +18,7 @@ load("//build_defs/cc/aws:aws_nitro_enclaves_sdk_static_lib_deps.bzl", "import_a
 load("//build_defs/cc:sdk_common.bzl", "sdk_common")
 
 def sdk_dependencies(protobuf_version, protobuf_repo_hash):
-    sdk_common(protobuf_version, protobuf_repo_hash)
+    sdk_common()
     aws_c_common()
     import_aws_sdk_cpp()
     import_aws_nitro_enclaves_sdk()
diff --git a/build_defs/cc/shared/bazel_rules_cpp.bzl b/build_defs/cc/shared/bazel_rules_cpp.bzl
index 53fb88fef..698516d16 100644
--- a/build_defs/cc/shared/bazel_rules_cpp.bzl
+++ b/build_defs/cc/shared/bazel_rules_cpp.bzl
@@ -20,16 +20,18 @@ def bazel_rules_cpp():
     maybe(
         http_archive,
         name = "rules_cc",
-        sha256 = "b295cad8c5899e371dde175079c0a2cdc0151f5127acc92366a8c986beb95c76",
-        strip_prefix = "rules_cc-daf6ace7cfeacd6a83e9ff2ed659f416537b6c74",
-        urls = ["https://github.com/bazelbuild/rules_cc/archive/daf6ace7cfeacd6a83e9ff2ed659f416537b6c74.zip"],
+        sha256 = "3d9e271e2876ba42e114c9b9bc51454e379cbf0ec9ef9d40e2ae4cec61a31b40",
+        strip_prefix = "rules_cc-0.0.6",
+        urls = [
+            "https://github.com/bazelbuild/rules_cc/releases/download/0.0.6/rules_cc-0.0.6.tar.gz",
+        ],
     )
-
     maybe(
-        git_repository,
+        http_archive,
         name = "rules_foreign_cc",
-        # version 0.8.0
-        commit = "e208deeae394c2aba5531d1f4edbba82d2e7430c",
-        remote = "https://github.com/bazelbuild/rules_foreign_cc.git",
-        shallow_since = "1650286188 -0700",
+        sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
+        strip_prefix = "rules_foreign_cc-0.9.0",
+        urls = [
+            "https://github.com/bazelbuild/rules_foreign_cc/archive/refs/tags/0.9.0.tar.gz",
+        ],
     )
diff --git a/build_defs/cc/shared/boringssl.bzl b/build_defs/cc/shared/boringssl.bzl
index d811337f2..05a5eb903 100644
--- a/build_defs/cc/shared/boringssl.bzl
+++ b/build_defs/cc/shared/boringssl.bzl
@@ -12,15 +12,15 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
 
 def boringssl():
     maybe(
-        git_repository,
+        # Commit from 2023-02-15.
+        http_archive,
         name = "boringssl",
-        # Committed on Oct 3, 2022
-        # https://github.com/google/boringssl/commit/c2837229f381f5fcd8894f0cca792a94b557ac52
-        commit = "c2837229f381f5fcd8894f0cca792a94b557ac52",
-        remote = "https://github.com/google/boringssl.git",
+        strip_prefix = "boringssl-5c22014ca513807ed03c657e8ede076164663979",
+        url = "https://github.com/google/boringssl/archive/5c22014ca513807ed03c657e8ede076164663979.zip",
+        sha256 = "863fc670c456f30923740c1639305132fdfb9d1b25ba385a67ae3862ef12a8af",
     )
diff --git a/build_defs/cc/shared/cc_utils.bzl b/build_defs/cc/shared/cc_utils.bzl
index b4967de6a..d1b9a4304 100644
--- a/build_defs/cc/shared/cc_utils.bzl
+++ b/build_defs/cc/shared/cc_utils.bzl
@@ -24,6 +24,7 @@ def cc_utils():
         # Commits on Apr 6, 2022
         commit = "15fa6a342af7b51cb51a22599026e01f1d81957b",
         remote = "https://github.com/nlohmann/json.git",
+        shallow_since = "1649251595 +0200",
     )
 
     maybe(
diff --git a/build_defs/cc/shared/nghttp2.bzl b/build_defs/cc/shared/nghttp2.bzl
index 02e3b9e96..f10171bda 100644
--- a/build_defs/cc/shared/nghttp2.bzl
+++ b/build_defs/cc/shared/nghttp2.bzl
@@ -15,6 +15,29 @@
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
 
+def pre_nghttp2():
+    maybe(
+        http_archive,
+        name = "madler_zlib",
+        build_file = Label("//build_defs/cc/shared/build_targets:zlib.BUILD"),
+        sha256 = "d233fca7cf68db4c16dc5287af61f3cd01ab62495224c66639ca3da537701e42",
+        strip_prefix = "zlib-1.2.13",
+        urls = [
+            "https://github.com/madler/zlib/releases/download/v1.2.13/zlib1213.zip"
+        ],
+    )
+    maybe(
+        http_archive,
+        name = "libxml2",
+        build_file = Label("//build_defs/cc/shared/build_targets:libxml2.BUILD"),
+        patches = [Label("//build_defs/cc/shared/build_targets:libxml2.patch")],
+        sha256 = "c8d6681e38c56f172892c85ddc0852e1fd4b53b4209e7f4ebf17f7e2eae71d92",
+        strip_prefix = "libxml2-2.9.12",
+        urls = [
+            "http://xmlsoft.org/sources/libxml2-2.9.12.tar.gz",
+        ],
+    )
+
 def nghttp2():
     maybe(
         http_archive,
diff --git a/build_defs/cc/shared/rules_boost.patch b/build_defs/cc/shared/rules_boost.patch
index a74e34efb..7614b1f09 100644
--- a/build_defs/cc/shared/rules_boost.patch
+++ b/build_defs/cc/shared/rules_boost.patch
@@ -15,7 +15,7 @@ diff --git a/boost/boost.bzl b/boost/boost.bzl
 index ff1630f..c483268 100644
 --- a/boost/boost.bzl
 +++ b/boost/boost.bzl
-@@ -219,10 +219,10 @@ def boost_deps():
+@@ -219,10 +219,3 @@ def boost_deps():
          ],
      )
  
@@ -26,10 +26,3 @@ index ff1630f..c483268 100644
 -        strip_prefix = "boringssl-fc44652a42b396e1645d5e72aba053349992136a",
 -        url = "https://github.com/google/boringssl/archive/fc44652a42b396e1645d5e72aba053349992136a.tar.gz",
 -    )
-+#     maybe(
-+#         http_archive,
-+#         name = "openssl",
-+#         sha256 = "6f640262999cd1fb33cf705922e453e835d2d20f3f06fe0d77f6426c19257308",
-+#         strip_prefix = "boringssl-fc44652a42b396e1645d5e72aba053349992136a",
-+#         url = "https://github.com/google/boringssl/archive/fc44652a42b396e1645d5e72aba053349992136a.tar.gz",
-+#     )
diff --git a/build_defs/cc/v8.bzl b/build_defs/cc/v8.bzl
index d9e150e50..35f680731 100644
--- a/build_defs/cc/v8.bzl
+++ b/build_defs/cc/v8.bzl
@@ -13,7 +13,7 @@
 # limitations under the License.
 
 load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")
-load("@rules_python//python:pip.bzl", "pip_install")
+load("@rules_python//python:pip.bzl", "pip_parse")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
 
 def import_v8(scp_repo_name = ""):
@@ -28,10 +28,10 @@ def import_v8(scp_repo_name = ""):
         patches = [scp_repo_name + "//build_defs/cc:v8.patch"],
     )
 
-    pip_install(
+    pip_parse(
         name = "v8_python_deps",
         extra_pip_args = ["--require-hashes"],
-        requirements = "@v8//:bazel/requirements.txt",
+        requirements_lock = "@v8//:bazel/requirements.txt",
     )
 
     new_git_repository(
diff --git a/build_defs/shared/absl.bzl b/build_defs/shared/absl.bzl
index 08d29e682..c4ac383bd 100644
--- a/build_defs/shared/absl.bzl
+++ b/build_defs/shared/absl.bzl
@@ -24,17 +24,19 @@ def absl():
     maybe(
         http_archive,
         name = "bazel_skylib",
-        sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
-        urls = ["https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz"],
+        sha256 = "b8a1527901774180afc798aeb28c4634bdccf19c4d98e7bdd1ce79d1fe9aaad7",
+        urls = [
+            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
+            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
+        ],
     )
-
     maybe(
         http_archive,
         name = "com_google_absl",
-        sha256 = "81311c17599b3712069ded20cca09a62ab0bf2a89dfa16993786c8782b7ed145",
-        strip_prefix = "abseil-cpp-20230125.1",
-        # Committed on Jan 25, 2023.
+        sha256 = "51d676b6846440210da48899e4df618a357e6e44ecde7106f1e44ea16ae8adc7",
+        strip_prefix = "abseil-cpp-20230125.3",
+        # Committed on May 4, 2023
         urls = [
-            "https://github.com/abseil/abseil-cpp/archive/20230125.1.tar.gz",
+            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20230125.3.zip",
         ],
     )
diff --git a/build_defs/shared/bazel_docker_rules.bzl b/build_defs/shared/bazel_docker_rules.bzl
index 659ce26b1..96281a5d6 100644
--- a/build_defs/shared/bazel_docker_rules.bzl
+++ b/build_defs/shared/bazel_docker_rules.bzl
@@ -12,7 +12,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
 
 # Note: these rules add a dependency on the golang toolchain and must be ordered
@@ -23,7 +23,6 @@ def bazel_docker_rules():
     maybe(
         http_archive,
         name = "io_bazel_rules_docker",
-        sha256 = "59d5b42ac315e7eadffa944e86e90c2990110a1c8075f1cd145f487e999d22b3",
-        strip_prefix = "rules_docker-0.17.0",
-        urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.17.0/rules_docker-v0.17.0.tar.gz"],
+        sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
+        urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
     )
diff --git a/build_defs/shared/bazel_rules_pkg.bzl b/build_defs/shared/bazel_rules_pkg.bzl
index 7353b6f54..40ee3aa51 100644
--- a/build_defs/shared/bazel_rules_pkg.bzl
+++ b/build_defs/shared/bazel_rules_pkg.bzl
@@ -19,9 +19,9 @@ def bazel_rules_pkg():
     maybe(
         http_archive,
         name = "rules_pkg",
-        sha256 = "a89e203d3cf264e564fcb96b6e06dd70bc0557356eb48400ce4b5d97c2c3720d",
+        sha256 = "8f9ee2dc10c1ae514ee599a8b42ed99fa262b757058f65ad3c384289ff70c4b8",
         urls = [
-            "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.5.1/rules_pkg-0.5.1.tar.gz",
-            "https://github.com/bazelbuild/rules_pkg/releases/download/0.5.1/rules_pkg-0.5.1.tar.gz",
+            "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
+            "https://github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
         ],
     )
diff --git a/build_defs/shared/golang.bzl b/build_defs/shared/golang.bzl
index 05bae654d..401f328a3 100644
--- a/build_defs/shared/golang.bzl
+++ b/build_defs/shared/golang.bzl
@@ -23,13 +23,12 @@ def go_deps():
     maybe(
         http_archive,
         name = "io_bazel_rules_go",
-        sha256 = "f2dcd210c7095febe54b804bb1cd3a58fe8435a909db2ec04e31542631cf715c",
+        sha256 = "6dc2da7ab4cf5d7bfc7c949776b1b7c733f05e56edc4bcd9022bb249d2e2a996",
         urls = [
-            "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.31.0/rules_go-v0.31.0.zip",
-            "https://github.com/bazelbuild/rules_go/releases/download/v0.31.0/rules_go-v0.31.0.zip",
+            "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
+            "https://github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
         ],
     )
-
     maybe(
         http_archive,
         name = "bazel_gazelle",
diff --git a/build_defs/shared/grpc.bzl b/build_defs/shared/grpc.bzl
index 781666d1d..ab2402c59 100644
--- a/build_defs/shared/grpc.bzl
+++ b/build_defs/shared/grpc.bzl
@@ -23,9 +23,13 @@ def grpc():
     maybe(
         http_archive,
         name = "com_github_grpc_grpc",
-        sha256 = "ec125d7fdb77ecc25b01050a0d5d32616594834d3fe163b016768e2ae42a2df6",
-        strip_prefix = "grpc-1.52.1",
+        patch_args = ["-p1"],
+        patches = [
+            Label("//build_defs/shared:grpc.patch"),
+        ],
+        sha256 = "17c0685da231917a7b3be2671a7b13b550a85fdda5e475313264c5f51c4da3f8",
+        strip_prefix = "grpc-1.55.1",
         urls = [
-            "https://github.com/grpc/grpc/archive/v1.52.1.tar.gz",
+            "https://github.com/grpc/grpc/archive/refs/tags/v1.55.1.zip",
         ],
     )
diff --git a/build_defs/shared/grpc.patch b/build_defs/shared/grpc.patch
new file mode 100644
index 000000000..abd0496ff
--- /dev/null
+++ b/build_defs/shared/grpc.patch
@@ -0,0 +1,32 @@
+diff --git a/bazel/grpc_deps.bzl b/bazel/grpc_deps.bzl
+index 5783189f5c..290c9a46a5 100644
+--- a/bazel/grpc_deps.bzl
++++ b/bazel/grpc_deps.bzl
+@@ -262,6 +262,7 @@ def grpc_deps():
+             ],
+             patches = [
+                 "@com_github_grpc_grpc//third_party:protobuf.patch",
++                "@com_github_grpc_grpc//third_party:protobuf_tensorflow.patch",
+             ],
+             patch_args = ["-p1"],
+         )
+diff --git a/third_party/protobuf_tensorflow.patch b/third_party/protobuf_tensorflow.patch
+new file mode 100644
+index 0000000000..7cdf6c74c3
+--- /dev/null
++++ b/third_party/protobuf_tensorflow.patch
+@@ -0,0 +1,14 @@
++diff --git a/protobuf.bzl b/protobuf.bzl
++index d96eeb4c9..188637b0c 100644
++--- a/protobuf.bzl
+++++ b/protobuf.bzl
++@@ -272,6 +272,9 @@ _proto_gen = rule(
++     implementation = _proto_gen_impl,
++ )
++ 
+++# tensorflow still depends directly on proto_gen this as of mid-July 2023
+++proto_gen = _proto_gen
+++
++ def _internal_gen_well_known_protos_java_impl(ctx):
++     args = ctx.actions.args()
++ 
diff --git a/cc/aws/proxy/src/proxify.cc b/cc/aws/proxy/src/proxify.cc
index 70c9334d0..cf986a9de 100644
--- a/cc/aws/proxy/src/proxify.cc
+++ b/cc/aws/proxy/src/proxify.cc
@@ -29,11 +29,15 @@ static constexpr char socket_vendor[] = "socket_vendor";
 static constexpr char resolv_conf_path[] = "/etc/resolv.conf";
 static constexpr char use_vc_option[] = "use-vc";
 
-static const char resolv_conf_content[] =
-    "nameserver 8.8.8.8\n"
-    "nameserver 8.8.4.4\n"
-    "nameserver 1.1.1.1\n"
-    "options use-vc";
+static const char resolv_conf_content[] = R"resolv(
+; use-vc forces use of TCP for DNS resolutions.
+; See https://man7.org/linux/man-pages/man5/resolv.conf.5.html
+options use-vc timeout:2 attempts:5
+search ec2.internal
+; Ip of AWS DNS resolver located at base of VPC IPV4 network range, plus two.
+; See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#AmazonDNS
+nameserver 10.0.0.2
+)resolv";
 
 int main(int argc, char* argv[]) {
   std::string exe = argv[0];
@@ -70,7 +74,7 @@ int main(int argc, char* argv[]) {
   // Run the socket_vendor. If there's already a running socket_vendor, this
   // will end with a benign failure.
   if (fork() == 0) {
-    daemon(1, 1);
+    daemon(1, 0);
     execl(socket_vendor_path.c_str(), socket_vendor_path.c_str(), nullptr);
     exit(1);
   }
diff --git a/cc/cpio/client_providers/instance_client_provider/src/aws/aws_instance_client_provider.cc b/cc/cpio/client_providers/instance_client_provider/src/aws/aws_instance_client_provider.cc
index 9aee10d6d..e666780d0 100644
--- a/cc/cpio/client_providers/instance_client_provider/src/aws/aws_instance_client_provider.cc
+++ b/cc/cpio/client_providers/instance_client_provider/src/aws/aws_instance_client_provider.cc
@@ -21,7 +21,6 @@
 #include <set>
 #include <string>
 #include <utility>
-#include <vector>
 
 #include <aws/ec2/model/DescribeInstancesRequest.h>
 #include <aws/ec2/model/DescribeTagsRequest.h>
@@ -60,7 +59,6 @@ using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameRequest;
 using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameResponse;
 using google::cmrt::sdk::instance_service::v1::InstanceDetails;
 using google::cmrt::sdk::instance_service::v1::InstanceNetwork;
-using google::protobuf::MapPair;
 using google::scp::core::AsyncContext;
 using google::scp::core::AsyncExecutorInterface;
 using google::scp::core::ExecutionResult;
@@ -83,21 +81,6 @@ using google::scp::cpio::common::CpioUtils;
 using google::scp::cpio::common::CreateClientConfiguration;
 using nlohmann::json;
 using std::all_of;
-using std::begin;
-using std::bind;
-using std::cbegin;
-using std::cend;
-using std::end;
-using std::find;
-using std::make_pair;
-using std::make_shared;
-using std::map;
-using std::move;
-using std::pair;
-using std::set;
-using std::shared_ptr;
-using std::string;
-using std::vector;
 using std::placeholders::_1;
 using std::placeholders::_2;
 using std::placeholders::_3;
@@ -122,7 +105,7 @@ constexpr char kAwsInstanceResourceNameFormat[] =
 
 // Available Regions. Refers to
 // https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
-const set<string> kAwsRegionCodes = {
+const std::set<std::string> kAwsRegionCodes = {
     "us-east-2",      "us-east-1",      "us-west-1",      "us-west-2",
     "af-south-1",     "ap-east-1",      "ap-south-2",     "ap-southeast-3",
     "ap-southeast-4", "ap-south-1",     "ap-northeast-3", "ap-northeast-2",
@@ -136,12 +119,12 @@ constexpr char kDefaultRegionCode[] = "us-east-1";
 // Returns a pair of iterators - one to the beginning, one to the end.
 const auto& GetRequiredFieldsForInstanceDynamicData() {
   static char const* components[3];
-  using iterator_type = decltype(cbegin(components));
-  static pair<iterator_type, iterator_type> iterator_pair = []() {
+  using iterator_type = decltype(std::cbegin(components));
+  static std::pair<iterator_type, iterator_type> iterator_pair = []() {
     components[0] = kAccountIdKey;
     components[1] = kInstanceIdKey;
     components[2] = kRegionKey;
-    return make_pair(cbegin(components), cend(components));
+    return std::make_pair(std::cbegin(components), std::cend(components));
   }();
   return iterator_pair;
 }
@@ -162,15 +145,16 @@ ExecutionResult AwsInstanceClientProvider::Stop() noexcept {
   return SuccessExecutionResult();
 }
 
-ExecutionResultOr<shared_ptr<EC2Client>>
-AwsInstanceClientProvider::GetEC2ClientByRegion(const string& region) noexcept {
+ExecutionResultOr<std::shared_ptr<EC2Client>>
+AwsInstanceClientProvider::GetEC2ClientByRegion(
+    const std::string& region) noexcept {
   auto target_region = region.empty() ? kDefaultRegionCode : region;
   auto it = kAwsRegionCodes.find(target_region);
   if (it == kAwsRegionCodes.end()) {
     return FailureExecutionResult(SC_AWS_INSTANCE_CLIENT_INVALID_REGION_CODE);
   }
 
-  shared_ptr<EC2Client> ec2_client;
+  std::shared_ptr<EC2Client> ec2_client;
   if (ec2_clients_list_.Find(target_region, ec2_client).Successful()) {
     return ec2_client;
   }
@@ -179,21 +163,22 @@ AwsInstanceClientProvider::GetEC2ClientByRegion(const string& region) noexcept {
       ec2_factory_->CreateClient(target_region, io_async_executor_);
   RETURN_IF_FAILURE(ec2_client_or.result());
 
-  ec2_client = move(*ec2_client_or);
-  ec2_clients_list_.Insert(make_pair(target_region, ec2_client), ec2_client);
+  ec2_client = std::move(*ec2_client_or);
+  ec2_clients_list_.Insert(std::make_pair(target_region, ec2_client),
+                           ec2_client);
 
   return ec2_client;
 }
 
 ExecutionResult AwsInstanceClientProvider::GetCurrentInstanceResourceNameSync(
-    string& resource_name) noexcept {
+    std::string& resource_name) noexcept {
   GetCurrentInstanceResourceNameRequest request;
   GetCurrentInstanceResourceNameResponse response;
   auto execution_result =
       CpioUtils::AsyncToSync<GetCurrentInstanceResourceNameRequest,
                              GetCurrentInstanceResourceNameResponse>(
-          bind(&AwsInstanceClientProvider::GetCurrentInstanceResourceName, this,
-               _1),
+          std::bind(&AwsInstanceClientProvider::GetCurrentInstanceResourceName,
+                    this, _1),
           request, response);
 
   if (!execution_result.Successful()) {
@@ -203,7 +188,7 @@ ExecutionResult AwsInstanceClientProvider::GetCurrentInstanceResourceNameSync(
     return execution_result;
   }
 
-  resource_name = move(*response.mutable_instance_resource_name());
+  resource_name = std::move(*response.mutable_instance_resource_name());
 
   return SuccessExecutionResult();
 }
@@ -214,9 +199,9 @@ ExecutionResult AwsInstanceClientProvider::GetCurrentInstanceResourceName(
         get_resource_name_context) noexcept {
   AsyncContext<GetSessionTokenRequest, GetSessionTokenResponse>
       get_token_context(
-          make_shared<GetSessionTokenRequest>(),
-          bind(&AwsInstanceClientProvider::OnGetSessionTokenCallback, this,
-               get_resource_name_context, _1),
+          std::make_shared<GetSessionTokenRequest>(),
+          std::bind(&AwsInstanceClientProvider::OnGetSessionTokenCallback, this,
+                    get_resource_name_context, _1),
           get_resource_name_context);
   auto execution_result =
       auth_token_provider_->GetSessionToken(get_token_context);
@@ -248,19 +233,20 @@ void AwsInstanceClientProvider::OnGetSessionTokenCallback(
     return;
   }
 
-  auto signed_request = make_shared<HttpRequest>();
-  signed_request->path = make_shared<string>(kAwsInstanceDynamicDataUrl);
+  auto signed_request = std::make_shared<HttpRequest>();
+  signed_request->path =
+      std::make_shared<std::string>(kAwsInstanceDynamicDataUrl);
   signed_request->method = HttpMethod::GET;
 
   const auto& access_token = *get_token_context.response->session_token;
-  signed_request->headers = make_shared<core::HttpHeaders>();
+  signed_request->headers = std::make_shared<core::HttpHeaders>();
   signed_request->headers->insert(
-      {string(kAuthorizationHeaderKey), access_token});
+      {std::string(kAuthorizationHeaderKey), access_token});
 
   AsyncContext<HttpRequest, HttpResponse> http_context(
-      move(signed_request),
-      bind(&AwsInstanceClientProvider::OnGetInstanceResourceNameCallback, this,
-           get_resource_name_context, _1),
+      std::move(signed_request),
+      std::bind(&AwsInstanceClientProvider::OnGetInstanceResourceNameCallback,
+                this, get_resource_name_context, _1),
       get_resource_name_context);
 
   auto execution_result = http1_client_->PerformRequest(http_context);
@@ -321,28 +307,31 @@ void AwsInstanceClientProvider::OnGetInstanceResourceNameCallback(
     return;
   }
 
-  auto resource_name = absl::StrFormat(
-      kAwsInstanceResourceNameFormat, json_response[kRegionKey].get<string>(),
-      json_response[kAccountIdKey].get<string>(),
-      json_response[kInstanceIdKey].get<string>());
+  auto resource_name =
+      absl::StrFormat(kAwsInstanceResourceNameFormat,
+                      json_response[kRegionKey].get<std::string>(),
+                      json_response[kAccountIdKey].get<std::string>(),
+                      json_response[kInstanceIdKey].get<std::string>());
 
   get_resource_name_context.response =
-      make_shared<GetCurrentInstanceResourceNameResponse>();
+      std::make_shared<GetCurrentInstanceResourceNameResponse>();
   get_resource_name_context.response->set_instance_resource_name(resource_name);
   get_resource_name_context.result = SuccessExecutionResult();
   get_resource_name_context.Finish();
 }
 
 ExecutionResult AwsInstanceClientProvider::GetInstanceDetailsByResourceNameSync(
-    const string& resource_name, InstanceDetails& instance_details) noexcept {
+    const std::string& resource_name,
+    InstanceDetails& instance_details) noexcept {
   GetInstanceDetailsByResourceNameRequest request;
   request.set_instance_resource_name(resource_name);
   GetInstanceDetailsByResourceNameResponse response;
   auto execution_result =
       CpioUtils::AsyncToSync<GetInstanceDetailsByResourceNameRequest,
                              GetInstanceDetailsByResourceNameResponse>(
-          bind(&AwsInstanceClientProvider::GetInstanceDetailsByResourceName,
-               this, _1),
+          std::bind(
+              &AwsInstanceClientProvider::GetInstanceDetailsByResourceName,
+              this, _1),
           request, response);
 
   if (!execution_result.Successful()) {
@@ -354,7 +343,7 @@ ExecutionResult AwsInstanceClientProvider::GetInstanceDetailsByResourceNameSync(
     return execution_result;
   }
 
-  instance_details = move(*response.mutable_instance_details());
+  instance_details = std::move(*response.mutable_instance_details());
 
   return SuccessExecutionResult();
 }
@@ -395,8 +384,9 @@ ExecutionResult AwsInstanceClientProvider::GetInstanceDetailsByResourceName(
   (*ec2_client_or)
       ->DescribeInstancesAsync(
           request,
-          bind(&AwsInstanceClientProvider::OnDescribeInstancesAsyncCallback,
-               this, get_details_context, _1, _2, _3, _4));
+          std::bind(
+              &AwsInstanceClientProvider::OnDescribeInstancesAsyncCallback,
+              this, get_details_context, _1, _2, _3, _4));
 
   return SuccessExecutionResult();
 }
@@ -406,7 +396,7 @@ void AwsInstanceClientProvider::OnDescribeInstancesAsyncCallback(
                  GetInstanceDetailsByResourceNameResponse>& get_details_context,
     const EC2Client*, const DescribeInstancesRequest&,
     const DescribeInstancesOutcome& outcome,
-    const shared_ptr<const AsyncCallerContext>&) noexcept {
+    const std::shared_ptr<const AsyncCallerContext>&) noexcept {
   if (!outcome.IsSuccess()) {
     const auto& error_type = outcome.GetError().GetErrorType();
     auto result = EC2ErrorConverter::ConvertEC2Error(
@@ -437,7 +427,7 @@ void AwsInstanceClientProvider::OnDescribeInstancesAsyncCallback(
       outcome.GetResult().GetReservations()[0].GetInstances()[0];
 
   get_details_context.response =
-      make_shared<GetInstanceDetailsByResourceNameResponse>();
+      std::make_shared<GetInstanceDetailsByResourceNameResponse>();
   auto* instance_details =
       get_details_context.response->mutable_instance_details();
 
@@ -450,9 +440,9 @@ void AwsInstanceClientProvider::OnDescribeInstancesAsyncCallback(
       target_instance.GetPublicIpAddress().c_str());
 
   // Extract instance labels.
-  auto* labels_proto = instance_details->mutable_labels();
+  auto& labels_proto = *instance_details->mutable_labels();
   for (const auto& tag : target_instance.GetTags()) {
-    labels_proto->insert(MapPair(tag.GetKey(), tag.GetValue()));
+    labels_proto[tag.GetKey()] = tag.GetValue();
   }
 
   FinishContext(SuccessExecutionResult(), get_details_context,
@@ -495,8 +485,9 @@ ExecutionResult AwsInstanceClientProvider::GetTagsByResourceName(
 
   (*ec2_client_or)
       ->DescribeTagsAsync(
-          request, bind(&AwsInstanceClientProvider::OnDescribeTagsAsyncCallback,
-                        this, get_tags_context, _1, _2, _3, _4));
+          request,
+          std::bind(&AwsInstanceClientProvider::OnDescribeTagsAsyncCallback,
+                    this, get_tags_context, _1, _2, _3, _4));
   return SuccessExecutionResult();
 }
 
@@ -505,7 +496,7 @@ void AwsInstanceClientProvider::OnDescribeTagsAsyncCallback(
         get_tags_context,
     const EC2Client*, const DescribeTagsRequest&,
     const DescribeTagsOutcome& outcome,
-    const shared_ptr<const AsyncCallerContext>&) noexcept {
+    const std::shared_ptr<const AsyncCallerContext>&) noexcept {
   if (!outcome.IsSuccess()) {
     const auto& error_type = outcome.GetError().GetErrorType();
     auto result = EC2ErrorConverter::ConvertEC2Error(
@@ -517,35 +508,36 @@ void AwsInstanceClientProvider::OnDescribeTagsAsyncCallback(
     return;
   }
 
-  get_tags_context.response = make_shared<GetTagsByResourceNameResponse>();
-  auto* tags = get_tags_context.response->mutable_tags();
+  get_tags_context.response = std::make_shared<GetTagsByResourceNameResponse>();
+  auto& tags = *get_tags_context.response->mutable_tags();
 
   for (const auto& tag : outcome.GetResult().GetTags()) {
-    tags->insert(MapPair(tag.GetKey(), tag.GetValue()));
+    tags[tag.GetKey()] = tag.GetValue();
   }
 
   FinishContext(SuccessExecutionResult(), get_tags_context,
                 cpu_async_executor_);
 }
 
-ExecutionResultOr<shared_ptr<EC2Client>> AwsEC2ClientFactory::CreateClient(
-    const string& region,
-    const shared_ptr<AsyncExecutorInterface>& io_async_executor) noexcept {
+ExecutionResultOr<std::shared_ptr<EC2Client>> AwsEC2ClientFactory::CreateClient(
+    const std::string& region,
+    const std::shared_ptr<AsyncExecutorInterface>& io_async_executor) noexcept {
   auto client_config =
-      common::CreateClientConfiguration(make_shared<string>(region));
+      common::CreateClientConfiguration(std::make_shared<std::string>(region));
   client_config->maxConnections = kMaxConcurrentConnections;
-  client_config->executor = make_shared<AwsAsyncExecutor>(io_async_executor);
-  return make_shared<EC2Client>(*client_config);
+  client_config->executor =
+      std::make_shared<AwsAsyncExecutor>(io_async_executor);
+  return std::make_shared<EC2Client>(*client_config);
 }
 
-shared_ptr<InstanceClientProviderInterface>
+std::shared_ptr<InstanceClientProviderInterface>
 InstanceClientProviderFactory::Create(
-    const shared_ptr<AuthTokenProviderInterface>& auth_token_provider,
-    const shared_ptr<HttpClientInterface>& http1_client,
-    const shared_ptr<HttpClientInterface>& http2_client,
-    const shared_ptr<AsyncExecutorInterface>& cpu_async_executor,
-    const shared_ptr<AsyncExecutorInterface>& io_async_executor) {
-  return make_shared<AwsInstanceClientProvider>(
+    const std::shared_ptr<AuthTokenProviderInterface>& auth_token_provider,
+    const std::shared_ptr<HttpClientInterface>& http1_client,
+    const std::shared_ptr<HttpClientInterface>& http2_client,
+    const std::shared_ptr<AsyncExecutorInterface>& cpu_async_executor,
+    const std::shared_ptr<AsyncExecutorInterface>& io_async_executor) {
+  return std::make_shared<AwsInstanceClientProvider>(
       auth_token_provider, http1_client, cpu_async_executor, io_async_executor);
 }
 }  // namespace google::scp::cpio::client_providers
diff --git a/cc/cpio/client_providers/instance_client_provider/src/gcp/gcp_instance_client_provider.cc b/cc/cpio/client_providers/instance_client_provider/src/gcp/gcp_instance_client_provider.cc
index ed1ba8f29..489497aca 100644
--- a/cc/cpio/client_providers/instance_client_provider/src/gcp/gcp_instance_client_provider.cc
+++ b/cc/cpio/client_providers/instance_client_provider/src/gcp/gcp_instance_client_provider.cc
@@ -49,7 +49,6 @@ using google::cmrt::sdk::instance_service::v1::
 using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameRequest;
 using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameResponse;
 using google::cmrt::sdk::instance_service::v1::InstanceDetails;
-using google::protobuf::MapPair;
 using google::scp::core::AsyncContext;
 using google::scp::core::AsyncExecutorInterface;
 using google::scp::core::ExecutionResult;
@@ -477,13 +476,10 @@ void GcpInstanceClientProvider::OnGetTagsByResourceNameCallback(
   }
 
   get_tags_context.response = make_shared<GetTagsByResourceNameResponse>();
-  auto* tags = get_tags_context.response->mutable_tags();
-
+  auto& tags = *get_tags_context.response->mutable_tags();
   for (const auto& tag : json_response[kTagBindingsListKey]) {
-    tags->insert(MapPair(tag[kTagBindingNameKey].get<string>(),
-                         tag[kTagBindingTagValueKey].get<string>()));
+    tags[tag[kTagBindingNameKey].get<string>()] = tag[kTagBindingTagValueKey].get<string>();
   }
-
   get_tags_context.result = SuccessExecutionResult();
   get_tags_context.Finish();
 }
@@ -689,11 +685,11 @@ void GcpInstanceClientProvider::OnGetInstanceDetailsCallback(
   // Extract instance labels.
   auto labels = json_response.find(kInstanceLabelsKey);
   if (labels != json_response.end()) {
-    auto* labels_proto =
-        get_instance_details_context.response->mutable_instance_details()
+    auto& labels_proto =
+        *get_instance_details_context.response->mutable_instance_details()
             ->mutable_labels();
     for (json::iterator it = labels->begin(); it != labels->end(); ++it) {
-      labels_proto->insert(MapPair(it.key(), it.value().get<string>()));
+      labels_proto[it.key()] = it.value().get<string>();
     }
   }
 
diff --git a/cc/cpio/client_providers/instance_client_provider/test/aws/aws_instance_client_provider_test.cc b/cc/cpio/client_providers/instance_client_provider/test/aws/aws_instance_client_provider_test.cc
index ad225e7cc..56ba6d6d9 100644
--- a/cc/cpio/client_providers/instance_client_provider/test/aws/aws_instance_client_provider_test.cc
+++ b/cc/cpio/client_providers/instance_client_provider/test/aws/aws_instance_client_provider_test.cc
@@ -65,7 +65,6 @@ using google::cmrt::sdk::instance_service::v1::
 using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameRequest;
 using google::cmrt::sdk::instance_service::v1::GetTagsByResourceNameResponse;
 using google::cmrt::sdk::instance_service::v1::InstanceDetails;
-using google::protobuf::MapPair;
 using google::scp::core::AsyncContext;
 using google::scp::core::BytesBuffer;
 using google::scp::core::ExecutionResult;
diff --git a/cc/cpio/client_providers/metric_client_provider/src/gcp/gcp_metric_client_utils.cc b/cc/cpio/client_providers/metric_client_provider/src/gcp/gcp_metric_client_utils.cc
index 66c76a618..0acfa1d01 100644
--- a/cc/cpio/client_providers/metric_client_provider/src/gcp/gcp_metric_client_utils.cc
+++ b/cc/cpio/client_providers/metric_client_provider/src/gcp/gcp_metric_client_utils.cc
@@ -38,7 +38,6 @@ using google::cloud::StatusCode;
 using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
 using google::monitoring::v3::TimeSeries;
-using google::protobuf::MapPair;
 using google::protobuf::util::TimeUtil;
 using google::scp::core::AsyncContext;
 using google::scp::core::ExecutionResult;
@@ -141,10 +140,10 @@ void GcpMetricClientUtils::AddResourceToTimeSeries(
     vector<TimeSeries>& time_series_list) noexcept {
   MonitoredResource resource;
   resource.set_type(kResourceType);
-  auto labels = resource.mutable_labels();
-  labels->insert(MapPair(string(kProjectIdKey), project_id));
-  labels->insert(MapPair(string(kInstanceIdKey), instance_id));
-  labels->insert(MapPair(string(kInstanceZoneKey), instance_zone));
+  auto& labels = *resource.mutable_labels();
+  labels[string(kProjectIdKey)] = project_id;
+  labels[string(kInstanceIdKey)] = instance_id;
+  labels[string(kInstanceZoneKey)] = instance_zone;
 
   for (auto& time_series : time_series_list) {
     time_series.mutable_resource()->CopyFrom(resource);
diff --git a/cc/cpio/client_providers/metric_client_provider/test/aws/aws_metric_client_utils_test.cc b/cc/cpio/client_providers/metric_client_provider/test/aws/aws_metric_client_utils_test.cc
index 445cf52ec..dc47efd03 100644
--- a/cc/cpio/client_providers/metric_client_provider/test/aws/aws_metric_client_utils_test.cc
+++ b/cc/cpio/client_providers/metric_client_provider/test/aws/aws_metric_client_utils_test.cc
@@ -41,7 +41,6 @@ using Aws::CloudWatch::Model::StandardUnitMapper::GetStandardUnitForName;
 using google::cmrt::sdk::metric_service::v1::MetricUnit;
 using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
-using google::protobuf::MapPair;
 using google::protobuf::util::TimeUtil;
 using google::scp::core::AsyncContext;
 using google::scp::core::ExecutionResult;
@@ -196,10 +195,10 @@ TEST_F(AwsMetricClientUtilsTest, ParseRequestToDatumOversizeDimensions) {
   metric->set_value(kValue);
   metric->set_unit(kUnit);
 
-  auto metric_labels_ = metric->mutable_labels();
-  string label_value = "test";
+  constexpr std::string_view label_value = "test";
+  auto& metric_labels_ = *metric->mutable_labels();
   for (auto i = 0; i < 31; i++) {
-    metric_labels_->insert(MapPair(to_string(i), label_value));
+    metric_labels_[to_string(i)] = label_value;
   }
 
   bool parse_request_to_datum_is_called = false;
diff --git a/cc/cpio/client_providers/metric_client_provider/test/gcp/gcp_metric_client_utils_test.cc b/cc/cpio/client_providers/metric_client_provider/test/gcp/gcp_metric_client_utils_test.cc
index d294c935c..683f28659 100644
--- a/cc/cpio/client_providers/metric_client_provider/test/gcp/gcp_metric_client_utils_test.cc
+++ b/cc/cpio/client_providers/metric_client_provider/test/gcp/gcp_metric_client_utils_test.cc
@@ -37,7 +37,6 @@ using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
 using google::monitoring::v3::Point;
 using google::monitoring::v3::TimeSeries;
-using google::protobuf::MapPair;
 using google::protobuf::util::TimeUtil;
 using google::scp::core::AsyncContext;
 using google::scp::core::ExecutionResult;
@@ -180,9 +179,9 @@ TEST_F(GcpMetricClientUtilsTest, OverSizeLabels) {
       [&](AsyncContext<PutMetricsRequest, PutMetricsResponse>& context) {});
 
   // Adds oversize labels.
-  auto labels = context.request->add_metrics()->mutable_labels();
+  auto& labels = *context.request->add_metrics()->mutable_labels();
   for (int i = 0; i < 33; ++i) {
-    labels->insert(MapPair(string("key") + to_string(i), string("value")));
+    labels[string("key") + to_string(i)] = string("value");
   }
   vector<TimeSeries> time_series_list;
   auto result = GcpMetricClientUtils::ParseRequestToTimeSeries(
diff --git a/cc/public/cpio/adapters/metric_client/src/metric_client.cc b/cc/public/cpio/adapters/metric_client/src/metric_client.cc
index b9a51145d..4bc4344e5 100644
--- a/cc/public/cpio/adapters/metric_client/src/metric_client.cc
+++ b/cc/public/cpio/adapters/metric_client/src/metric_client.cc
@@ -38,7 +38,6 @@
 using google::cmrt::sdk::metric_service::v1::Metric;
 using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
-using google::protobuf::MapPair;
 using google::protobuf::util::TimeUtil;
 using google::scp::core::AsyncContext;
 using google::scp::core::AsyncExecutorInterface;
diff --git a/cc/public/cpio/examples/local_metric_client_test.cc b/cc/public/cpio/examples/local_metric_client_test.cc
index bdd40dca5..13f8081c3 100644
--- a/cc/public/cpio/examples/local_metric_client_test.cc
+++ b/cc/public/cpio/examples/local_metric_client_test.cc
@@ -29,7 +29,6 @@
 using google::cmrt::sdk::metric_service::v1::MetricUnit;
 using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
-using google::protobuf::MapPair;
 using google::scp::core::AsyncContext;
 using google::scp::core::ExecutionResult;
 using google::scp::core::GetErrorMessage;
@@ -85,8 +84,8 @@ int main(int argc, char* argv[]) {
   metric->set_name("test_metric");
   metric->set_value("12");
   metric->set_unit(MetricUnit::METRIC_UNIT_COUNT);
-  auto labels = metric->mutable_labels();
-  labels->insert(MapPair(string("lable_key"), string("label_value")));
+  auto& labels = *metric->mutable_labels();
+  labels[string("label_key")] = string("label_value");
 
   atomic<bool> finished = false;
   result = metric_client->PutMetrics(
diff --git a/cc/public/cpio/examples/metric_client_test.cc b/cc/public/cpio/examples/metric_client_test.cc
index e201e6443..037d17ba6 100644
--- a/cc/public/cpio/examples/metric_client_test.cc
+++ b/cc/public/cpio/examples/metric_client_test.cc
@@ -29,7 +29,6 @@
 using google::cmrt::sdk::metric_service::v1::MetricUnit;
 using google::cmrt::sdk::metric_service::v1::PutMetricsRequest;
 using google::cmrt::sdk::metric_service::v1::PutMetricsResponse;
-using google::protobuf::MapPair;
 using google::scp::core::AsyncContext;
 using google::scp::core::ExecutionResult;
 using google::scp::core::GetErrorMessage;
@@ -83,8 +82,8 @@ int main(int argc, char* argv[]) {
   metric->set_name("test_metric");
   metric->set_value("12");
   metric->set_unit(MetricUnit::METRIC_UNIT_COUNT);
-  auto labels = metric->mutable_labels();
-  labels->insert(MapPair(string("lable_key"), string("label_value")));
+  auto& labels = *metric->mutable_labels();
+  labels[string("label_key")] = string("label_value");
 
   atomic<bool> finished = false;
   result = metric_client->PutMetrics(
diff --git a/cc/public/cpio/utils/metric_aggregation/src/metric_utils.h b/cc/public/cpio/utils/metric_aggregation/src/metric_utils.h
index 96e82852a..e7c73f7dc 100644
--- a/cc/public/cpio/utils/metric_aggregation/src/metric_utils.h
+++ b/cc/public/cpio/utils/metric_aggregation/src/metric_utils.h
@@ -53,15 +53,15 @@ class MetricUtils {
             final_unit));
 
     // Adds the labels from metric_info and additional_labels.
-    auto labels = metric->mutable_labels();
+    auto& labels = *metric->mutable_labels();
     if (metric_info->labels) {
       for (const auto& label : *metric_info->labels) {
-        labels->insert(protobuf::MapPair(label.first, label.second));
+        labels[label.first] = label.second;
       }
     }
     if (metric_tag && metric_tag->additional_labels) {
       for (const auto& label : *metric_tag->additional_labels) {
-        labels->insert(protobuf::MapPair(label.first, label.second));
+        labels[label.first] = label.second;
       }
     }
     *metric->mutable_timestamp() = protobuf::util::TimeUtil::GetCurrentTime();
diff --git a/cc/roma/ipc/src/work_container.cc b/cc/roma/ipc/src/work_container.cc
index 91dae9ea7..ea4af8b9e 100644
--- a/cc/roma/ipc/src/work_container.cc
+++ b/cc/roma/ipc/src/work_container.cc
@@ -16,6 +16,7 @@
 
 #include "work_container.h"
 
+#include <mutex>
 #include <utility>
 
 using google::scp::core::ExecutionResult;
