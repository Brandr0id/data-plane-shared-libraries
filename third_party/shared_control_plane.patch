--- cc/aws/proxy/src/proxify.cc
+++ cc/aws/proxy/src/proxify.cc
@@ -29,11 +29,15 @@ static constexpr char socket_vendor[] = "socket_vendor";
 static constexpr char resolv_conf_path[] = "/etc/resolv.conf";
 static constexpr char use_vc_option[] = "use-vc";

-static const char resolv_conf_content[] =
-    "nameserver 8.8.8.8\n"
-    "nameserver 8.8.4.4\n"
-    "nameserver 1.1.1.1\n"
-    "options use-vc";
+static const char resolv_conf_content[] = R"resolv(
+; use-vc forces use of TCP for DNS resolutions.
+; See https://man7.org/linux/man-pages/man5/resolv.conf.5.html
+options use-vc timeout:2 attempts:5
+search ec2.internal
+; Ip of AWS DNS resolver located at base of VPC IPV4 network range, plus two.
+; See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#AmazonDNS
+nameserver 10.0.0.2
+)resolv";

 int main(int argc, char* argv[]) {
   std::string exe = argv[0];
@@ -70,7 +74,7 @@ int main(int argc, char* argv[]) {
   // Run the socket_vendor. If there's already a running socket_vendor, this
   // will end with a benign failure.
   if (fork() == 0) {
-    daemon(1, 1);
+    daemon(1, 0);
     execl(socket_vendor_path.c_str(), socket_vendor_path.c_str(), nullptr);
     exit(1);
   }
diff -ru build_defs/cc/sdk.bzl build_defs/cc/sdk.bzl
--- build_defs/cc/sdk.bzl
+++ build_defs/cc/sdk.bzl
@@ -22,7 +22,7 @@ load("//build_defs/cc/bazels:enclaves_kmstools.bzl", "enclaves_kmstools_librarie
 load("//build_defs/cc/bazels:utils.bzl", "utils")
 load("//build_defs/cc/bazels:golang.bzl", "go_deps")
 load("//build_defs/cc/bazels:grpc.bzl", "grpc")
-load("//build_defs/cc/aws:aws_sdk_cpp_deps.bzl", "import_aws_sdk_cpp")
+load("//build_defs/cc/aws:aws_sdk_cpp_source_code_deps.bzl", "import_aws_sdk_cpp")
 load("//build_defs/cc/bazels:google_cloud_cpp.bzl", "import_google_cloud_cpp")

 def sdk_dependencies(protobuf_version, protobuf_repo_hash):
diff --git build_defs/cc/v8.bzl build_defs/cc/v8.bzl
--- build_defs/cc/v8.bzl
+++ build_defs/cc/v8.bzl
@@ -13,7 +13,7 @@
 # limitations under the License.

 load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")
-load("@rules_python//python:pip.bzl", "pip_install")
+load("@rules_python//python:pip.bzl", "pip_parse")
 load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

 def import_v8(scp_repo_name = ""):
@@ -28,10 +28,10 @@ def import_v8(scp_repo_name = ""):
         patches = [scp_repo_name + "//build_defs/cc:v8.patch"],
     )

-    pip_install(
+    pip_parse(
         name = "v8_python_deps",
         extra_pip_args = ["--require-hashes"],
-        requirements = "@v8//:bazel/requirements.txt",
+        requirements_lock = "@v8//:bazel/requirements.txt",
     )

     new_git_repository(
