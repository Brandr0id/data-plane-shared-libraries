/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{- $defineGuard := $file.Package | printf "%s_" | replace "." "_" | upper}}
#ifndef {{$defineGuard}}_NATIVE_REQUEST_HANDLER
#define {{$defineGuard}}_NATIVE_REQUEST_HANDLER

#include <string_view>
#include <utility>

#include <grpcpp/grpcpp.h>

#include "src/util/status_macro/status_util.h"
{{range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
{{range $path := $svcopts.CppHostProcessCallbackIncludes}}
#include "{{$path}}"
{{- end -}}{{/*$svcopts.CppHostProcessCallbackIncludes range*/}}
{{- end -}}{{/*svc range*/}}
#include "{{$file.Name | trimSuffix (ext $file.Name)}}.pb.h"

{{range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
namespace {{$svcopts.CppNamespace}} {

template <typename TMetadata>
std::pair<std::string, grpc::Status> HandleNativeRequest(
    std::string_view request_payload, const TMetadata& metadata,
    std::string_view function_name) {
  {{- range $rpc := $svc.MethodsWithOption
  "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $rpcopts := index $rpc.Options "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- if gt (len $svcopts.CppHostProcessCallbackIncludes) 0}}
  if (function_name == "{{$svcopts.Romav8AppName}}.{{$rpc.Name}}") {
    {{$reqType}} request;
    request.ParseFromString(request_payload);
    auto [response_payload, status] = {{$rpcopts.CppHostProcessCallback}}(metadata, request);
    return std::make_pair(response_payload.SerializeAsString(), privacy_sandbox::server_common::FromAbslStatus(status));
  }
  {{- end -}}{{/*if $svcopts.CppHostProcessCallbackIncludes*/}}
  {{- end -}}{{/*rpc range*/}}

  grpc::Status status(grpc::StatusCode::NOT_FOUND, "Invalid function name");
  return std::make_pair("", status);
}
}  // namespace {{$svcopts.CppNamespace}}
{{- end -}}{{/*svc range*/}}

#endif  // {{$defineGuard}}_NATIVE_REQUEST_HANDLER
{{- end -}}{{/*file range*/}}
