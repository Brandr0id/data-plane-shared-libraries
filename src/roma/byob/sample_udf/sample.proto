// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package privacy_sandbox.server_common.byob;

import "apis/privacysandbox/apis/roma/app_api/v1/options.proto";

service SampleService {
  option (privacysandbox.apis.roma.app_api.v1.roma_svc_annotation) = {
    name: 'Sample Server',
    roma_app_name: 'SampleServer',
    description: 'A sample server showcasing declarative APIs for BYOB',
    cpp_namespace: 'privacy_sandbox::roma_byob::example'
  };

  rpc Sample(SampleRequest) returns (SampleResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'The Sample method MethodAnnotation. Add some information about this rpc method.'
    };
  }

  rpc ReadPayload(ReadPayloadRequest) returns (ReadPayloadResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation. Add some information about this rpc method.'
    };
  }

  rpc GeneratePayload(GeneratePayloadRequest)
      returns (GeneratePayloadResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation. Add some information about this rpc method.'
    };
  }

  rpc ReadCallbackPayload(ReadCallbackPayloadRequest)
      returns (ReadCallbackPayloadResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation'
    };
  }

  rpc WriteCallbackPayload(WriteCallbackPayloadRequest)
      returns (WriteCallbackPayloadResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation'
    };
  }

  rpc RunPrimeSieve(RunPrimeSieveRequest) returns (RunPrimeSieveResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation'
    };
  }

  rpc SortList(SortListRequest) returns (SortListResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'MethodAnnotation'
    };
  }
}

enum FunctionType {
  option (privacysandbox.apis.roma.app_api.v1.roma_enum_annotation) = {
    description: 'Functions that can be executed by the Sample UDF.'
  };
  FUNCTION_UNSPECIFIED = 0;
  FUNCTION_HELLO_WORLD = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_enumval_annotation) = {description: 'The hello world function.'}
  ];
  FUNCTION_PRIME_SIEVE = 2 [
    (privacysandbox.apis.roma.app_api.v1.roma_enumval_annotation) = {description: 'The sieve-based prime generator function.'}
  ];
  FUNCTION_CALLBACK = 3;
  FUNCTION_TEN_CALLBACK_INVOCATIONS = 4;
}

message SampleRequest {
  option (privacysandbox.apis.roma.app_api.v1.roma_mesg_annotation) = {
    description: 'SampleRequest specifies a single function to execute.'
  };
  FunctionType function = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The function to be executed'}
  ];
}

message SampleResponse {
  option (privacysandbox.apis.roma.app_api.v1.roma_mesg_annotation) = {
    description: "SampleResponse returns the function's output."
  };
  string greeting = 1
      [(privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {
        description: 'The payload generated by the function.'
      }];
  repeated int32 prime_number = 2 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'A list of prime numbers.'}
  ];
}

message ReadPayloadRequest {
  repeated bytes payloads = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The payloads sent into the UDF.'}
  ];
}

message ReadPayloadResponse {
  uint64 payload_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payloads sent to the UDF.'}
  ];
}

message GeneratePayloadRequest {
  uint64 element_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payload elements for the UDF to generate.'}
  ];
  uint64 element_count = 2 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The number of the payload elements for the UDF to generate.'}
  ];
}

message GeneratePayloadResponse {
  repeated bytes payloads = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The payloads generated by the UDF.'}
  ];
}

message ReadCallbackPayloadRequest {
  uint64 element_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payload elements to generate as input to the Host API function.'}
  ];
  uint64 element_count = 2 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The number of the payload elements to generate as input to the Host API function.'}
  ];
}

message ReadCallbackPayloadResponse {
  uint64 payload_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payloads sent to the Host API function.'}
  ];
}

message WriteCallbackPayloadRequest {
  uint64 element_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payload elements for the Host API function to generate.'}
  ];
  uint64 element_count = 2 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The number of the payload elements for the Host API function to generate.'}
  ];
}

message WriteCallbackPayloadResponse {
  uint64 payload_size = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The size of the payloads returned by the Host API function.'}
  ];
}

message RunPrimeSieveRequest {
  int32 prime_count = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The count of prime numbers to generate.'}
  ];
}

message RunPrimeSieveResponse {
  int32 largest_prime = 1 [
    (privacysandbox.apis.roma.app_api.v1.roma_field_annotation) = {description: 'The Nth (and largest) of the prime numbers generated.'}
  ];
}

message SortListRequest {}

message SortListResponse {}
