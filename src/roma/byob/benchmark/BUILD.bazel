# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@rules_cc//cc:defs.bzl", "cc_binary")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files", "pkg_mkdirs")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//src/roma/byob:byob.bzl", "byob_image")
load("//third_party:container_deps.bzl", "DISTROLESS_USERS")

cc_binary(
    name = "roma_byob_benchmark",
    srcs = ["roma_byob_benchmark.cc"],
    deps = [
        "//src/roma/byob/udf:sample_callback_cc_proto",
        "//src/roma/byob/udf:sample_cc_proto",
        "//src/roma/byob/udf:sample_roma_api",
        "//src/roma/byob/utility:utils",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@google_benchmark//:benchmark",
    ],
)

pkg_mkdirs(
    name = "benchmark_distdir",
    attributes = pkg_attributes(mode = "0700"),
    dirs = ["/dist/benchmarks"],
)

pkg_files(
    name = "benchmark_execs",
    srcs = [":roma_byob_benchmark"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "benchmark_tar_{}".format(user.flavor),
        srcs = [
            ":benchmark_distdir",
            ":benchmark_execs",
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

[
    byob_image(
        name = "benchmark_{flavor}{dbg}_image".format(
            dbg = debug_str,
            flavor = user.flavor,
        ),
        cmd = [
            "--benchmark_counters_tabular=true",
            "--benchmark_out_format=json",
            "--benchmark_time_unit=ms",
            "--benchmark_out=/benchmark_data/roma_byob{dbg}_benchmark.json".format(
                dbg = debug_str,
                flavor = user.flavor,
            ),
        ],
        debug = len(debug_str) > 0,
        entrypoint = ["/server/bin/roma_byob_benchmark"],
        repo_tags = [
            "roma_byob_benchmark_image:v1-{flavor}{dbg}".format(
                dbg = debug_str.replace("_", "-"),
                flavor = user.flavor,
            ),
        ],
        tars = [
            ":benchmark_tar_{}".format(user.flavor),
        ],
        udf_binary_labels = ["//src/roma/byob/udf:udf_binaries"],
        use_nonroot = True if user.flavor == "nonroot" else False,
    )
    for debug_str in ("_debug", "")
    for user in DISTROLESS_USERS
]

[
    expand_template(
        name = "image_{}_test_yaml".format(user.flavor),
        out = "image_{}_test.yaml".format(user.flavor),
        substitutions = {
            "{GID}": str(user.gid),
            "{UID}": str(user.uid),
        },
        template = ":image_test.yaml",
    )
    for user in DISTROLESS_USERS
]

[
    container_structure_test(
        name = "benchmark_{}_test".format(img_name),
        size = "small",
        configs = [":image_{}_test.yaml".format(user.flavor)],
        image = ":benchmark_{}".format(img_name),
        tags = ["noasan"],
    )
    for debug_str in ("_debug", "")
    for user in DISTROLESS_USERS
    for img_name in ["{flavor}{dbg}_image".format(
        dbg = debug_str,
        flavor = user.flavor,
    )]
]

genrule(
    name = "copy_to_dist",
    srcs = [
        ":benchmark_nonroot_image_tarball.tar",
        ":benchmark_root_image_tarball.tar",
        ":benchmark_nonroot_debug_image_tarball.tar",
        ":benchmark_root_debug_image_tarball.tar",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat <<EOF >'$@'
mkdir -p {dir}
cp $(execpath :benchmark_nonroot_image_tarball.tar) {dir}/benchmark_nonroot_image.tar
cp $(execpath :benchmark_root_image_tarball.tar) {dir}/benchmark_root_image.tar
cp $(execpath :benchmark_nonroot_debug_image_tarball.tar) {dir}/benchmark_nonroot_debug_image.tar
cp $(execpath :benchmark_root_debug_image_tarball.tar) {dir}/benchmark_root_debug_image.tar
builders/tools/normalize-dist
EOF""".format(dir = "dist/roma_byob"),
    executable = True,
    local = True,
    message = "copying aws artifacts to dist directory",
)
