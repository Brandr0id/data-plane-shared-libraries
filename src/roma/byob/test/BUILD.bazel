# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//src/roma/byob:byob.bzl", "roma_byob_image")
load("//third_party:container_deps.bzl", "DISTROLESS_USERS")

cc_library(
    name = "example_roma_app_service",
    hdrs = ["example_roma_app_service.h"],
    deps = [
        "//src/roma/byob/example:example_cc_proto",
        "//src/roma/config",
        "//src/util:execution_token",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "example_roma_byob_app_service",
    hdrs = ["example_roma_byob_app_service.h"],
    deps = [
        ":example_roma_app_service",
        "//src/roma/byob/config",
        "//src/roma/byob/example:example_cc_proto",
        "//src/roma/byob/interface:roma_service",
        "//src/roma/config",
        "//src/util:execution_token",
        "//src/util/status_macro:status_macros",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_binary(
    name = "example_benchmark",
    srcs = ["example_benchmark.cc"],
    deps = [
        ":example_roma_byob_app_service",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "@google_benchmark//:benchmark",
    ],
)

pkg_files(
    name = "example_benchmark_execs",
    srcs = [":example_benchmark"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/tools",
)

pkg_tar(
    name = "example_benchmark_tar",
    srcs = [":example_benchmark_execs"],
)

[
    roma_byob_image(
        name = "example_benchmark_{}_image".format(user.flavor),
        debug = True,
        entrypoint = ["/tools/example_benchmark"],
        repo_tags = ["example_benchmark_image:v1-{}".format(user.flavor)],
        tars = [":example_benchmark_tar"],
        udf_binary_labels = ["//src/roma/byob/sample_udf:udf_binaries"],
        use_nonroot = True if user.flavor == "nonroot" else False,
    )
    for user in DISTROLESS_USERS
]

cc_binary(
    name = "example_shell",
    srcs = ["example_shell.cc"],
    deps = [
        ":example_roma_byob_app_service",
        "//src/communication:json_utils",
        "//src/roma/byob/tools:shell_evaluator",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/types:span",
    ],
)

pkg_files(
    name = "example_shell_execs",
    srcs = [":example_shell"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/tools",
)

pkg_tar(
    name = "example_shell_tar",
    srcs = [":example_shell_execs"],
)

[
    roma_byob_image(
        name = "example_shell_{}_image".format(user.flavor),
        debug = True,
        entrypoint = ["/tools/example_shell"],
        repo_tags = ["example_shell_image:v1-{}".format(user.flavor)],
        tars = [":example_shell_tar"],
        udf_binary_labels = ["//src/roma/byob/sample_udf:udf_binaries"],
        use_nonroot = True if user.flavor == "nonroot" else False,
    )
    for user in DISTROLESS_USERS
]

cc_binary(
    name = "example_test",
    srcs = ["example_test.cc"],
    deps = [
        ":example_roma_byob_app_service",
        "//src/roma/byob/example:example_cc_proto",
        "//src/roma/byob/utility:utils",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "roma_byob_test",
    srcs = ["roma_byob_test.cc"],
    deps = [
        "//src/roma/byob/sample_udf:sample_byob_sdk_cc_proto",
        "//src/roma/byob/sample_udf:sample_byob_sdk_roma_cc_lib",
        "//src/roma/byob/sample_udf:sample_callback_cc_proto",
        "//src/roma/byob/utility:udf_blob",
        "//src/roma/byob/utility:utils",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest_main",
    ],
)

pkg_files(
    name = "test_execs",
    srcs = [
        ":example_test",
        ":roma_byob_test",
    ],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "test_tar_{}".format(user.flavor),
        srcs = [":test_execs"],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

TEST_NAME_TO_ENTRYPOINT_MAP = (
    ("sample", "/server/bin/roma_byob_test"),
    ("example", "/server/bin/example_test"),
)

[
    roma_byob_image(
        name = "{test_name}_test_{flavor}_image".format(
            flavor = user.flavor,
            test_name = test_name,
        ),
        debug = False,
        entrypoint = [entrypoint],
        repo_tags = [
            "roma_byob_{test_name}_test_image:v1-{flavor}".format(
                flavor = user.flavor,
                test_name = test_name,
            ),
        ],
        tars = [
            ":test_tar_{}".format(user.flavor),
        ],
        udf_binary_labels = ["//src/roma/byob/sample_udf:udf_binaries"],
        use_nonroot = True if user.flavor == "nonroot" else False,
    )
    for user in DISTROLESS_USERS
    for test_name, entrypoint in TEST_NAME_TO_ENTRYPOINT_MAP
]

[
    expand_template(
        name = "{test_name}_image_test_yaml".format(
            test_name = test_name,
        ),
        out = "{test_name}_image_test.yaml".format(
            test_name = test_name,
        ),
        substitutions = {
            "{COMMAND}": str(entrypoint),
        },
        template = ":commands.yaml",
        visibility = ["//visibility:public"],
    )
    for test_name, entrypoint in TEST_NAME_TO_ENTRYPOINT_MAP
]

[
    container_structure_test(
        name = "{test_name}_test_{flavor}_image_test".format(
            flavor = user.flavor,
            test_name = test_name,
        ),
        size = "small",
        timeout = "short",
        configs = ["{test_name}_image_test.yaml".format(
            test_name = test_name,
        )],
        image = "{test_name}_test_{flavor}_image".format(
            flavor = user.flavor,
            test_name = test_name,
        ),
        tags = [
            "noasan",
            "notsan",
            "noubsan",
        ],
    )
    for user in DISTROLESS_USERS
    for test_name, entrypoint in TEST_NAME_TO_ENTRYPOINT_MAP
]

genrule(
    name = "copy_to_dist",
    srcs = [
        ":example_test_nonroot_image_tarball.tar",
        ":example_test_root_image_tarball.tar",
        ":sample_test_nonroot_image_tarball.tar",
        ":sample_test_root_image_tarball.tar",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat <<EOF >'$@'
mkdir -p {dir}
cp $(execpath :example_test_nonroot_image_tarball.tar) {dir}/example_test_nonroot_image.tar
cp $(execpath :example_test_root_image_tarball.tar) {dir}/example_test_root_image.tar
cp $(execpath :sample_test_nonroot_image_tarball.tar) {dir}/sample_test_nonroot_image.tar
cp $(execpath :sample_test_root_image_tarball.tar) {dir}/sample_test_root_image.tar
builders/tools/normalize-dist
EOF""".format(dir = "dist/roma_byob"),
    executable = True,
    local = True,
    message = "copying aws artifacts to dist directory",
)
