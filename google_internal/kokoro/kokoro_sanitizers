#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o xtrace
export TZ=Etc/UTC
export PS4='+\t $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

# shellcheck disable=SC1091
source "$(dirname "$(readlink -f "$0")")"/lib_build.sh

export IMAGE_BUILD_VERBOSE=1
kokoro::configure_build_env

ARCH="$("${WORKSPACE}"/builders/tools/get-architecture)"
readonly ARCH

function _collect_logs() {
  filename="$1"
  printf 'Collecting bazel logs [%s]...\n' "${filename}" &>/dev/stderr
  "${WORKSPACE}"/builders/tools/bazel-debian run //:collect-test-logs -- --zip-filename "${filename}"
}

function _cleanup() {
  declare -r -i _status=$?
  declare -r -a logfiles=(
    asan-test-logs.zip
    tsan-test-logs.zip
    ubsan-test-logs.zip
    proxy-debian-"${ARCH}"-test-logs.zip
    proxy-al2023-"${ARCH}"-test-logs.zip
  )
  for lf in "${logfiles[@]}"; do
    kokoro::extract_dist_logs "logs/${lf}" "${lf%-test-logs.zip}"
  done
  exit ${_status}
}
trap _cleanup EXIT

if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
  kokoro::init_perfgate
fi

"${WORKSPACE}"/builders/tools/bazel-debian test --config=asan //...
_collect_logs asan-test-logs.zip

# TODO(b/293876281): Turn this back on once the tests are passing.
#
# A few tests have translation units that are too big for the debug ASAN build
# so we run them in an optimized build:
#"${WORKSPACE}"/builders/tools/bazel-debian test --config=asanopt //...

# TODO(b/293876281): Enable memory sanitizer once we upgrade the gtest library
# that has failures or work out how to exclude it.

if [[ ${ARCH} != "arm64" ]]; then
  "${WORKSPACE}"/builders/tools/bazel-debian test --config=tsan //...
else
  # Extra tests are marked with notsan-aarch64 for arm64 (aarch64).
  "${WORKSPACE}"/builders/tools/bazel-debian test --config=tsan --config=tsan-aarch64 //...
fi
_collect_logs tsan-test-logs.zip

# arm64 is not supported by Undefined-Behaviour Sanitzer, see: b/191376688
# https://g3doc.corp.google.com/devtools/multiarch/g3doc/arm_build_run_debug.md#sanitizers
if [[ ${ARCH} != "arm64" ]]; then
  # Tests with undefined-behaviour sanitizer
  "${WORKSPACE}"/builders/tools/bazel-debian test --config=ubsan //...
  _collect_logs ubsan-test-logs.zip
fi
