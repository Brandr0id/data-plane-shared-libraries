#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -o errexit
set -o xtrace
export TZ=Etc/UTC
export PS4='+\t $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

# shellcheck disable=SC1091
source "$(dirname "$(readlink -f "$0")")"/../lib_build.sh

declare -r KYTHE_VERSION=v0.0.60
declare -r KYTHE_DOWNLOAD_URL="https://github.com/kythe/kythe/releases/download/${KYTHE_VERSION}/kythe-${KYTHE_VERSION}.tar.gz"

if [[ -v KOKORO_ARTIFACTS_DIR ]] && [[ ${KOKORO_GOB_BRANCH} != "main" ]]; then
  printf "Only generate Kythe indexes in main branch. Returning success.\n"
  return 0
fi
declare -r KYTHE_CORPUS=team.googlesource.com/privacy-sandbox-team/servers/common//main

trap _cleanup EXIT
function _cleanup() {
  declare -r -i _status=$?
  if [[ ${_status} -eq 0 ]] && [[ -n ${KYTHE_DIR} ]]; then
    rm -rf "${KYTHE_DIR}" || true
  fi
  if [[ ${_status} -eq 0 ]] && [[ -n ${KYTHE_OUTPUT_DIRECTORY} ]]; then
    rm -rf "${KYTHE_OUTPUT_DIRECTORY}" || true
  fi
  if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
    sleep 5s
  fi
  exit ${_status}
}

kokoro::set_workspace

declare -r -a KYTHE_BUILD_IMAGES=(
  build-debian
)
EXTERNAL_REPO_TEST=1 kokoro::configure_build_env KYTHE_BUILD_IMAGES

printf "Build and unpackage Kythe extraction...\n"
declare -r KYTHE_DIR="${WORKSPACE}/kythe"
mkdir -p "${WORKSPACE}/kythe"
declare -r KYTHE_OUTPUT_DIRECTORY="${WORKSPACE}/kythe_extract"
mkdir -p "${KYTHE_OUTPUT_DIRECTORY}"
sudo chmod -R 755 "${KYTHE_DIR}"
wget -q -O - "${KYTHE_DOWNLOAD_URL}" \
  | tar -xvz --directory="${KYTHE_DIR}" --strip-components=1

# TODO: Debug failures for --override_repository flag when providing absolute path.
cd "${WORKSPACE}"

# Build the repository with config=kythe to enable Kythe extraction.
"${WORKSPACE}"/builders/tools/bazel-debian \
  build \
  --config=kythe \
  --override_repository "kythe_release=kythe/" \
  --define "kythe_corpus=${KYTHE_CORPUS}" \
  -- //... -//kythe/...

if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
  # KZIP name must only be the commit hash.
  declare -r KYTHE_KZIP_NAME="${KOKORO_GOB_COMMIT}".kzip
else
  declare -r KYTHE_KZIP_NAME=$(date +"%Y%m%d_%H%M%S").kzip
fi

"$KYTHE_DIR/tools/kzip" merge \
  --output "${KYTHE_OUTPUT_DIRECTORY}/${KYTHE_KZIP_NAME}" \
  $(find bazel-out/*/extra_actions/ -name "*.kzip")

# Only upload if in kokoro job. Kythe can only ingest KZips generated from Kokoro jobs, not locally.
if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
  gsutil -m \
    cp \
    "${KYTHE_OUTPUT_DIRECTORY}/${KYTHE_KZIP_NAME}" \
    "gs://kiwi-air-force-kythe-cross-references/commo-repo/${KYTHE_KZIP_NAME}"
fi

# Allow coverage to fail.
"${WORKSPACE}"/builders/tools/bazel-debian coverage //... || true
"${WORKSPACE}"/builders/tools/bazel-debian run //:collect-coverage || true
