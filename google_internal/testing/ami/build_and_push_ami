#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -o pipefail
set -o errexit

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --with-ami                   AMI region in which to build and store AWS AMIs. Use multiple times to specify more than one region
                                 Currently only supports 1 region. If empty, none will be built
    --reuse-ami                  With --with-ami, if set, use the provided AMI (required to be already pushed).
    --verbose                    Enable verbose output

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    CBUILD_ARGS                  Additional command-line arguments to cbuild
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

declare -a AMI_REGIONS
declare -a BUILD_AND_TEST_ARGS
declare INSTANCE=aws
declare PLATFORM=aws

while [[ $# -gt 0 ]]; do
  case "$1" in
    --with-ami)
      AMI_REGIONS+=("$2")
      shift 2 || usage
      ;;
    --reuse-ami)
      REUSE_AMI="$2"
      shift 2 || usage
      ;;
    --verbose)
      set -o xtrace
      CBUILD_ARGS="${CBUILD_ARGS} --verbose"
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

# TODO: Support GCP or make AWS specific in file name.
if [[ ${INSTANCE_AND_PLATFORM} != "aws" ]]; then
  ERROR_MESSAGE="Only `aws` instance and platform is currently supported with --isntance-and-platform."
  printf "\n\n[ERROR]: Failure: %s\n\n" "${ERROR_MESSAGE}"
  exit 1
fi

# TODO(b/327473814): Support multiple regions.
if [[ ${#AMI_REGIONS[@]} -lt 1 ]]; then
  ERROR_MESSAGE="Please provide --with-ami."
  printf "\n\n[ERROR]: Failure: %s\n\n" "${ERROR_MESSAGE}"
  usage 1
elif [[ ${#AMI_REGIONS[@]} -ne 1 ]]; then
  ERROR_MESSAGE="Only one AMI is currently supported with --with-ami."
  printf "\n\n[ERROR]: Failure: %s\n\n" "${ERROR_MESSAGE}"
  exit 1
fi

BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --config=instance_${INSTANCE} --config=platform_${PLATFORM}"

function arr_to_string_list() {
  declare -r -n arr=$1
  printf -v joined '"%s",' "${arr[@]}"
  printf "[%s]" "${joined%,}"
}

printf "==== Sourcing builder.sh =====\n"
# We can't use $WORKSPACE here as it may not be set - it'll be created
# by builder.sh if it's empty.
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly SCRIPT_DIR
BUILDER="${SCRIPT_DIR}"/../../../builders/tools/builder.sh
readonly BUILDER
if [[ ! -f ${BUILDER} ]]; then
  ERROR_MESSAGE=$(printf "builder.sh file does not exist, expected at: %s\n"  "${BUILDER}")
  fail "$ERROR_MESSAGE"
fi
# shellcheck source=builders/tools/builder.sh
source "${BUILDER}" || fail "Failed to source builder.sh"

printf "==== Creating dist dirs =====\n"
declare -r DIST="${WORKSPACE}"/dist
declare -r AWS_DIST_DIR="${DIST}"/aws
mkdir -p "${AWS_DIST_DIR}"
chmod 774 "${DIST}" "${AWS_DIST_DIR}"

if [[ -n ${AMI_REGIONS[0]} && -v REUSE_AMI ]]; then
  printf "==== Reusing provided AMI =====\n"
  # TODO(b/327473814): Support multiple regions.
  declare -r PUSHED_AMIS="{\"region\": \"${AMI_REGIONS[0]}\", \"aws_ec2_instance_ami\": \"${REUSE_AMI}\"}"
elif [[ -n ${AMI_REGIONS[0]} ]]; then
  printf "==== Build AWS nitro enclave artifacts using build-amazonlinux2 and pack into AMI =====\n"
  CBUILD_ARGS="${CBUILD_ARGS} --seccomp-unconfined"
  builder::cbuild_debian "
  set -o errexit
  bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //...
  if [[ ${PLATFORM} == aws ]]; then
    bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //src/public/cpio/validator:aws_nitro_enclaves_validator_image.tar
    bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //src/public/cpio/validator:copy_to_dist
  fi
  "
  # The above builds into dist/aws_nitro_enclaves_validator_image.tar
  declare -r IMAGE_TAR="${AWS_DIST_DIR}/aws_nitro_enclaves_validator_image.tar"
  declare -r IMAGE_URI=bazel/src/public/cpio/validator
  declare -r IMAGE_DEFAULT_TAG=aws_nitro_enclaves_validator_image
  "${WORKSPACE}"/builders/tools/convert-docker-to-nitro \
    --docker-image-tar "${IMAGE_TAR}" \
    --docker-image-uri "${IMAGE_URI}" \
    --docker-image-tag "${IMAGE_DEFAULT_TAG}" \
    --outdir dist/aws/ \
    --eif-name aws_nitro_enclaves_validator_image

  UTILS_IMAGE="$("${WORKSPACE}"/builders/tools/get-builder-image-tagged --image utils)"
  readonly UTILS_IMAGE
  DOCKER_USER="$(id -u):$(id -g)"
  readonly DOCKER_USER
  docker run \
    --rm \
    --user "${DOCKER_USER}" \
    --entrypoint=unzip \
    --volume "${AWS_DIST_DIR}:${AWS_DIST_DIR}" \
    --workdir "${AWS_DIST_DIR}" \
    "${UTILS_IMAGE}" -o -q "${AWS_DIST_DIR}"/aws_artifacts.zip

  printf "==== build AWS AMI (using packer) =====\n"
  regions="$(arr_to_string_list AMI_REGIONS)"
  # TODO(b/327473814): Use fresh packer-manifest file, this appends to the existing packer-manifest file.
  builder::cbuild_al2 "
set -o errexit
packer build \
  -var=regions='${regions}' \
  -var=commit_version=$(git rev-parse HEAD) \
  -var=distribution_dir=dist/aws \
  -var=workspace=/src/workspace \
  google_internal/testing/ami/amazonlinux2/image.pkr.hcl
"
  # TODO(b/327473814): Support multiple regions. The -1 in ".builds[-1]" gives the latest AMI only.
  # TODO(b/327476176): Relative path works but absolute path with AWS_DIST_DIR does not.
  # PUSHED_AMIS=$("${WORKSPACE}"/builders/tools/jq -r '.builds[-1].artifact_id | split(":") | {region: .[0], aws_ec2_instance_ami: .[1]}' "${AWS_DIST_DIR}"/packer-manifest.json)
  PUSHED_AMIS=$("${WORKSPACE}"/builders/tools/jq -r '.builds[-1].artifact_id | split(":") | {region: .[0], aws_ec2_instance_ami: .[1]}' dist/aws/packer-manifest.json)
  readonly PUSHED_AMIS
fi

printf "PUSHED_AMIS: %s\n" "${PUSHED_AMIS}"
