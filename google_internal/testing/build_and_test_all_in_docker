#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o xtrace
export TZ=Etc/UTC
export PS4='+\t $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

# shellcheck disable=SC1091
source "$(dirname "$(readlink -f "$0")")"/../kokoro/lib_build.sh

export IMAGE_BUILD_VERBOSE=1
kokoro::configure_build_env

ARCH="$("${WORKSPACE}"/builders/tools/get-architecture)"
readonly ARCH

function _collect_debian_logs() {
  filename="$1"
  printf 'Collecting bazel logs from build-debian [%s]...\n' "${filename}" &>/dev/stderr
  "${WORKSPACE}"/builders/tools/bazel-debian run //:collect-test-logs -- --zip-filename "${filename}"
}

function _cleanup() {
  declare -r -i _status=$?
  declare -r build_logs=presubmit-test-logs.zip
  _collect_debian_logs ${build_logs}
  declare -r -a logfiles=(
    "${build_logs}"
    proxy-debian-"${ARCH}"-test-logs.zip
    proxy-al2023-"${ARCH}"-test-logs.zip
  )
  for lf in "${logfiles[@]}"; do
    kokoro::extract_dist_logs "logs/${lf}" "${lf%-test-logs.zip}"
  done
  exit ${_status}
}
trap _cleanup EXIT

declare -i VERBOSE=0
declare -i PRECOMMIT_ONLY=0
declare -i SKIP_PRECOMMIT=0
declare -i RUN_TESTS=0
declare INSTANCE=local
declare PLATFORM=aws

function usage() {
  local -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  ${BASH_SOURCE[0]} <options>
    --instance <type>            Instance can be local, aws, or gcp. Default: ${INSTANCE}
    --platform <type>            Platform can be aws, gcp, or local. Default: ${PLATFORM}
    --precommit-only             Run precommit then exit
    --no-precommit               Skip precommit checks
    --with-tests                 Also runs tests before building
    --verbose                    Enable verbose output

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly SCRIPT_DIR
# shellcheck disable=SC1090
source "${SCRIPT_DIR}"/../../builders/tools/builder.sh

while [[ $# -gt 0 ]]; do
  case "$1" in
    --precommit-only)
      PRECOMMIT_ONLY=1
      shift
      ;;
    --no-precommit)
      SKIP_PRECOMMIT=1
      shift
      ;;
    --with-tests)
      RUN_TESTS=1
      shift
      ;;
    --instance)
      INSTANCE="$2"
      shift 2 || usage
      ;;
    --platform)
      PLATFORM="$2"
      shift 2 || usage
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --config=instance_${INSTANCE} --config=platform_${PLATFORM}"

if [[ ${VERBOSE} -eq 1 ]]; then
  set -o xtrace
  CBUILD_ARGS="${CBUILD_ARGS} --verbose"
fi

if [[ ${SKIP_PRECOMMIT} -eq 0 ]]; then
  "${WORKSPACE}"/builders/tools/pre-commit
fi
if [[ ${PRECOMMIT_ONLY} -eq 1 ]]; then
  exit 0
fi

printf "==== build and test specified targets using bazel-debian ====\n"

CBUILD_ARGS="${CBUILD_ARGS} --seccomp-unconfined"

builder::cbuild_debian "
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //...
if [[ ${RUN_TESTS} -ne 0 ]]; then
  printf 'Tests enabled. Running tests...'
  bazel ${BAZEL_STARTUP_ARGS} test ${BAZEL_EXTRA_ARGS} --build_tests_only //...
fi
"
