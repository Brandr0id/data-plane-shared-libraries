#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Script for the common repo to build, test, push an AMI to AWS, and then run the CPIO validator on AWS all in one.
#

set -o pipefail
set -o errexit
set -o xtrace

START=$(date +%s)
readonly START

trap _clean_up EXIT
function _clean_up() {
  local -r -i _status=$?
  local -r -i END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\ngoogle_internal/testing/build_test_and_push_ami runtime: %'ds\n" $((END - START)) &>/dev/stderr
  if [[ ${_status} -eq 0 ]]; then
    printf "google_internal/testing/build_test_and_push_ami completed successfully\n" &>/dev/stderr
  else
    printf "Error: google_internal/testing/build_test_and_push_ami completed with status code: %s\n" "${_status}" &>/dev/stderr
  fi
  exit ${_status}
}

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --without-shared-cache       Containers will not mount ${HOME}/.cache/bazel
    --with-ami                   AMI region in which to build and store AWS AMIs. Use multiple times to specify more than one region
                                 Currently only supports 1 region. If empty, none will be built
    --reuse-ami                  With --with-ami, if set, use the provided AMI (required to be already pushed).
    --no-precommit               Skip precommit checks
    --with-tests                 Also runs tests before building

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    CBUILD_ARGS                  Additional command-line arguments to cbuild
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

declare -a BUILD_AND_TEST_ARGS
declare -a BUILD_AND_PUSH_AMI_ARGS

while [[ $# -gt 0 ]]; do
  case "$1" in
    --with-ami)
      BUILD_AND_PUSH_AMI_ARGS+=("--with-ami")
      BUILD_AND_PUSH_AMI_ARGS+=("$2")
      shift 2 || usage
      ;;
    --reuse-ami)
      REUSE_AMI="$2"
      BUILD_AND_PUSH_AMI_ARGS+=("--reuse-ami")
      BUILD_AND_PUSH_AMI_ARGS+=("$2")
      shift 2 || usage
      ;;
    --no-precommit)
      BUILD_AND_TEST_ARGS+=("--no-precommit")
      shift
      ;;
    --with-tests)
      BUILD_AND_TEST_ARGS+=("--with-tests")
      shift
      ;;
    --verbose)
      BUILD_AND_TEST_ARGS+=("--verbose")
      BUILD_AND_PUSH_AMI_ARGS+=("--verbose")
      set -o xtrace
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

# Exit 1 on any error before pushing to origin.
function fail() {
  printf "\n\n[ERROR]: Failure: %s\n\n" "$@"
  sleep 5s  # Make sure that stdout has time to be written
  exit 1
}

printf "==== Sourcing builder.sh =====\n"
# We can't use $WORKSPACE here as it may not be set - it'll be created
# by builder.sh if it's empty.
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly SCRIPT_DIR
BUILDER="${SCRIPT_DIR}"/../../builders/tools/builder.sh
readonly BUILDER
if [[ ! -f ${BUILDER} ]]; then
  ERROR_MESSAGE=$(printf "builder.sh file does not exist, expected at: %s\n"  "${BUILDER}")
  fail "$ERROR_MESSAGE"
fi
# shellcheck source=builders/tools/builder.sh
source "${BUILDER}" || fail "Failed to source builder.sh"

printf "==== Creating dist dirs =====\n"
declare -r DIST="${WORKSPACE}"/dist
declare -r AWS_DIST_DIR="${DIST}"/aws
mkdir -p "${AWS_DIST_DIR}"
chmod 770 "${DIST}" "${AWS_DIST_DIR}"

printf "==== Running google_internal/testing/build_and_test_all_in_docker =====\n"
if ! [[ -r ${WORKSPACE}/google_internal/testing/build_and_test_all_in_docker && -x ${WORKSPACE}/google_internal/testing/build_and_test_all_in_docker ]]; then
  printf "build_and_test_all_in_docker script not found at location: %s/google_internal/testing/build_and_test_all_in_docker\n" "${WORKSPACE}" &>/dev/stderr
  fail "build_and_test_all_in_docker not found"
fi
if ! "${WORKSPACE}"/google_internal/testing/build_and_test_all_in_docker "${BUILD_AND_TEST_ARGS[@]}" --instance aws; then
  fail "Failed to run build_and_test_all_in_docker"
fi

# Remove AWS_DIST_DIR/pushed_amis.json file before creating it in google_internal/testing/ami/build_and_push_ami
declare -r PUSHED_AMIS_FILE="${AWS_DIST_DIR}"/pushed_amis.json
rm -f ${PUSHED_AMIS_FILE}

if [[ -n ${BUILD_AND_PUSH_AMI_ARGS[0]} ]]; then
  printf "==== Running google_internal/testing/ami/build_and_push_ami =====\n"
  if ! [[ -r ${WORKSPACE}/google_internal/testing/ami/build_and_push_ami && -x ${WORKSPACE}/google_internal/testing/ami/build_and_push_ami ]]; then
    printf "build_and_push_ami script not found at location: %s/google_internal/testing/ami/build_and_push_ami\n" "${WORKSPACE}" &>/dev/stderr
    fail "build_and_push_ami not found"
  fi
  # Add AWS to instance and platform.
  BUILD_AND_PUSH_AMI_ARGS+=("--instance-and-platform")
  BUILD_AND_PUSH_AMI_ARGS+=("aws")
  if ! "${WORKSPACE}"/google_internal/testing/ami/build_and_push_ami "${BUILD_AND_PUSH_AMI_ARGS[@]}"; then
    fail "Failed to run build_and_push_ami"
  fi
fi

PUSHED_AMIS="$(<${PUSHED_AMIS_FILE})"
readonly PUSHED_AMIS
